{"config":{"lang":["en","zh"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"ChainStream","text":"<p>A Stream-based LLM Agent Framework for Continuous Context Sensing and Sharing</p> <p>\u4e00\u4e2a\u6d41\u5f0f\u7684LLM\u667a\u80fd\u4f53\u6846\u67b6\uff0c\u7528\u4e8e\u8fde\u7eed\u4e0a\u4e0b\u6587\u611f\u77e5\u548c\u5171\u4eab\u3002</p> <p>Welcome to Everyone! </p> <p>We welcome everyone to participate in the development of ChainStream, whether it is a developer, user, contributor, or any other role.</p> <p>Join Us! </p> <p>ChainStream is still work in progress, welcome to every user, suggester and contributor. Feel free to connect with us through Github Repo or Zulip Group :). Also, this documentation is still under development, please check back frequently for updates.</p>"},{"location":"#documentation-architecture","title":"Documentation Architecture","text":"<p>For everyone, we suggest you read:</p> <ul> <li> ChainStream Overview to get an overview of ChainStream's basic concepts and features.</li> </ul> <p>This documentation is written for three main audiences:</p> <ul> <li> ChainStream User This audience is for those who want to use ChainStream to build their own agent or integrate it into their existing system.</li> <li> Agent Developer This audience is for those who want to understand the inner workings of ChainStream and build their own agent.</li> <li> ChainStream Sys Contributor This audience is for those who want to contribute to the development of ChainStream.</li> </ul>"},{"location":"#updates","title":"Updates","text":"<ul> <li>2024.06: ChainStream website is launched.</li> <li>2024.06: ChainStream project team participated in Mobisys2024 in Tokyo and presented a report at EdgeFM Workshop. The paper will be published soon.</li> <li>2024.06: ChainStream Github Repo is launched.</li> <li>2024.05: The introduction paper of ChainStream was accepted by MobiSys 2024, Workshop on Edge and Mobile Foundation Models.</li> <li>2023.12: The project of ChainStream started preliminary development.</li> <li>2023.10: The project of ChainStream was initiated.</li> </ul>"},{"location":"#copyright","title":"Copyright","text":"<ul> <li>ChainStream is designed and developed by the AIoT Team from Institute for AI Industry Research (AIR), Tsinghua University. </li> <li>Main contributors: Yuanchun Li, Jiacheng Liu, Wenxing Xu, Liangyan Li, Wenjie Du and others. We will release more detailed references in the future.</li> </ul>"},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/","title":"Agent Development Guide for ChainStream","text":"<p>Abstract</p> <p>This development guide provides detailed steps and guidance to help developers utilize the ChainStream framework for managing data flows and creating agents. With these guidelines, developers can effectively use ChainStream APIs and modules to develop agents, achieving efficient data flow management and responsive mechanisms to meet various complex data task requirements.</p>"},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#chainstream-agent-development-module-overview","title":"Chainstream Agent Development Module Overview","text":""},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#stream-module","title":"Stream Module","text":"<ul> <li>Description: The <code>Stream</code> class forms the core of data streams, where each data stream is an instance of <code>Stream</code> identified by a <code>stream_id</code>. ChainStream enables data monitoring and processing by attaching listener functions to these data streams.</li> <li>API:</li> <li><code>chainstream.get_stream(stream_id)</code>: Retrieves a <code>Stream</code> object based on the provided <code>stream_id</code>, typically used when constructing an <code>Agent</code> instance to obtain input and output streams.</li> <li><code>chainstream.create_stream(stream_id)</code>: Creates a new data stream and returns a <code>Stream</code> instance identified by <code>stream_id</code>.</li> <li><code>chainstream.stream.Stream.register_listener(agent, listener_func)</code>: Attaches a listener function to the <code>Stream</code> instance.</li> <li><code>chainstream.stream.Stream.unregister_listener(agent)</code>: Unregisters all listener functions attached to the data stream.</li> <li><code>chainstream.stream.Stream.add_item(data)</code>: Pushes data into the data stream.</li> </ul>"},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#agent-module","title":"Agent Module","text":"<ul> <li>Description: One or more agents need to be created to accomplish user-specified tasks. Agent instances should inherit from the <code>chainstream.agent.Agent</code> class, passing an <code>agent_id</code> identifier to the superclass, and implement <code>__init__</code>, <code>start()</code>, and <code>stop()</code> methods to handle data stream monitoring, processing, and result output.</li> <li>API:</li> <li><code>__init__(agent_id)</code>: Initializes a new <code>Agent</code> object for task completion, where <code>agent_id</code> is a mandatory parameter used to identify the agent within the system. Initialization of resources and data streams can be done within this method.</li> <li><code>start()</code>: Defines the listener function for processing data streams and binds it to the respective data stream.</li> <li><code>stop()</code>: Unregisters all listener functions attached by the agent to the data stream upon completion.</li> </ul>"},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#buffercontext-module","title":"BufferContext Module","text":"<ul> <li>Description: If data storage is required after processing, the <code>BufferContext</code> module can be used to create a data container\u2014a queue where data can only be added at the tail and retrieved from the head.</li> <li>API:</li> <li><code>chainstream.context.BufferContext()</code>: Instantiates a new <code>BufferContext</code> object to create a data container.</li> <li><code>chainstream.context.BufferContext.add(data)</code>: Adds data to the tail of the data container.</li> <li><code>chainstream.context.BufferContext.get()</code>: Retrieves data from the head of the data container.</li> </ul>"},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#llm-module","title":"LLM Module","text":"<ul> <li>Description: The LLM (Language Learning Model) module integrates various models capable of handling different types of input data such as text, images, and audio. Models respond based on input processing requirements and provided data.</li> <li>API:</li> <li><code>chainstream.llm.get_model(type)</code>: Instantiates an LLM object to obtain a model for processing data.</li> <li><code>chainstream.llm.make_prompt(query, data)</code>: Converts processing requirements and input data into a format accepted by the model.</li> <li><code>chainstream.llm.query(prompt)</code>: Sends input prompt to the model and returns the model's response.</li> </ul>"},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#agent-development-guide","title":"Agent Development Guide","text":""},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#agent_id","title":"Agent_id","text":"<p>In ChainStream, <code>Agent_id</code> is a string used to uniquely identify an agent instance.</p> <p>When creating an agent, it's essential to specify a unique <code>Agent_id</code> to identify and manage different agents within the system.</p> <ul> <li><code>Agent_id</code> can be any string that adheres to naming conventions, such as <code>test_agent</code>, <code>arxiv_processor</code>, etc.</li> <li>To avoid conflicts, descriptive names are recommended, and special characters or spaces should be avoided.</li> </ul>"},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#api-usage","title":"API Usage","text":"<ul> <li>When creating a new agent, inherit from the <code>chainstream.agent.Agent</code> class and implement its methods.</li> <li>In the <code>__init__</code> method, call the superclass constructor and initialize resources and data streams.</li> <li>In the <code>start</code> method, define the listener function for processing data streams and bind it to the respective data stream.</li> <li>Apart from the listener function, typical tasks include data preprocessing, parsing, model querying, response handling, and format conversion.</li> <li>In the <code>stop</code> method, unregister all listener functions attached by the agent to the data stream.</li> </ul>"},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#naming-conventions","title":"Naming Conventions","text":"<p>Follow Python naming conventions for modules, classes, functions, and variables.</p> <ul> <li>Use lowercase letters and underscores <code>_</code> to separate words for module and file names.</li> <li>Use CamelCase for class names.</li> <li>Use lowercase letters and underscores <code>_</code> for function and variable names.</li> </ul>"},{"location":"AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#example-agent","title":"Example Agent","text":"<p>Success</p> <p>This example demonstrates how to implement an agent in ChainStream to extract Arxiv abstracts. Let's start developing the agent following the provided APIs and adhering to the agent development guidelines!</p> <pre><code>import chainstream as cs\nfrom chainstream.llm import get_model\n\nclass TestAgent(cs.agent.Agent):\n    def __init__(self):\n        super().__init__(\"test_arxiv_agent\")\n        self.input_stream = cs.get_stream(\"all_arxiv\")\n        self.output_stream = cs.get_stream(\"cs_arxiv\")\n        self.llm = get_model([\"text\"])\n\n    def start(self):\n        def process_paper(paper):\n            paper_content = paper[\"abstract\"]\n            prompt = \"Is this abstract related to edge LLM agent? Say 'yes' or 'no'.\"\n            prompt = [{\"role\": \"user\", \"content\": prompt+paper_content}]\n            response = self.llm.query(prompt)\n            print(response)\n            if response == 'Yes':\n                print(paper)\n                self.output_stream.add_item(paper)\n\n        self.input_stream.register_listener(self, process_paper)\n\n    def stop(self):\n        self.input_stream.unregister_listener(self)\n</code></pre>"},{"location":"AgentDevelopmentGuide/AGENT_STORE_GUIDE/","title":"Agent Store Guide","text":"<p>In the future, we will provide an Agent Store server, which will primarily include features such as the agent package publishing process, review mechanisms, version management, and agent search.</p> <p>Currently, the Agent Store is still in the planning stage. For now, we have placed the initially implemented agents in the <code>agents</code> directory of our GitHub repository. Users can directly search for these agents in the Dashboard and run them immediately.</p>"},{"location":"AgentDevelopmentGuide/AGENT_STORE_GUIDE/#agent-package-structure","title":"Agent Package Structure","text":"<p>In an agent, the following items have to be configured:</p> <ul> <li>Agent name, description, package (zip)</li> <li>ChainStream version</li> <li>Devices: desktop, phone, glass, watch, etc. (numbers)</li> <li>Deployment doc: how the devices are deployed</li> <li>Dependency: other agents/streams/memory that must be available and their versions</li> <li>LLM: models that must be available</li> <li>Public streams/memory: output streams/memory that can be seen by other agents</li> </ul>"},{"location":"AgentDevelopmentGuide/SANDBOX_GUIDE/","title":"Sandbox Testing Guide","text":"<p>Abstract</p> <p>Sandbox is a secure environment used to execute and test Agent code for specific Tasks. This guide will show you how to use the Sandbox framework for integrated testing of Agents and Tasks. It covers initializing the ChainStream environment, starting test Agents, and evaluating Task results.</p>"},{"location":"AgentDevelopmentGuide/SANDBOX_GUIDE/#task-data-sources","title":"Task Data Sources","text":"<ul> <li>daily news</li> <li>daily dialogue (text from voice transcription)</li> <li>chat message records</li> <li>email history</li> <li>daily arxiv papers</li> <li>daily stock market updates</li> </ul> <p>More data sources coming soon...</p> <p>You can also expand on additional data sources and place them in the <code>test_data</code> folder.</p>"},{"location":"AgentDevelopmentGuide/SANDBOX_GUIDE/#task-evaluation-metrics","title":"Task Evaluation Metrics","text":"<ul> <li>Success Rate: Does the agent start without errors?</li> <li>Input/Output Correctness: Are input and output streams correctly selected?</li> <li>Static Evaluation: Differences between Agent Generator code and human routines.</li> <li>Dynamic Evaluation: Differences between Agent Generator output streams and human routine output streams.</li> </ul> <p>More evaluation metrics coming soon...</p> <p>You can also expand on additional evaluation metrics and write them in the <code>evaluate_task</code> function.</p>"},{"location":"AgentDevelopmentGuide/SANDBOX_GUIDE/#task-framework-development","title":"Task Framework Development","text":"<ul> <li> <p>Select a manually written Agent for evaluation. You can use pre-developed Agents from the <code>scripts</code> folder or write your own. For the process, refer to the ChainStream Agent Development Guide.</p> </li> <li> <p>Choose a Task for evaluation. You can refer to various tasks in the <code>tasks</code> folder or create a new Task, ensuring it inherits from <code>task_config_base.py</code>'s TaskConfig class. Define specific task descriptions, input-output streams, and override three methods:</p> </li> </ul> <pre><code>1. init_environment: Initialize task environment, create test agents and streams.\n2. start_task: Start the source stream.\n3. evaluate_task: Evaluate output stream data processed by the Agent, and return evaluation results.\n</code></pre> <ul> <li>Run the selected Agent and Task in the Sandbox.</li> </ul> <p>Note</p> <p>You can add your Task to the <code>__init__.py</code> file in the <code>tasks</code> folder and store it in a dictionary named <code>ALL_TASKS</code> for centralized management and easier future referencing.</p>"},{"location":"AgentDevelopmentGuide/SANDBOX_GUIDE/#sandbox-framework-development","title":"Sandbox Framework Development","text":"<p>Note</p> <p>Requires a running Runtime with evaluation mode enabled, capable of monitoring actions of the testing Agent, including various APIs of the Chainstream Agent module.</p>"},{"location":"AgentDevelopmentGuide/SANDBOX_GUIDE/#1-initialization","title":"1. Initialization","text":"<ul> <li>ChainStream Initialization: Set the Task and Agent to be used.</li> <li>Get Runtime Environment: Initialize the Runtime using <code>get_chainstream_core()</code>.</li> <li>Agent Setup: Read Agent script content based on file format.</li> </ul> <pre><code>def __init__(self, task, agent_file):\n  cs_server.init(server_type='core')\n  cs_server.start()\n  self.runtime = cs_server.get_chainstream_core()\n  self.task = task\n  if isinstance(agent_file, str) and agent_file.endswith('.py'):\n      with open(agent_file, 'r') as f:\n          agent_file = f.read()\n  self.agent_str = agent_file\n  self.result = {}\n</code></pre>"},{"location":"AgentDevelopmentGuide/SANDBOX_GUIDE/#2-start-testing-agent","title":"2. Start Testing Agent","text":"<ul> <li>Initialize Task Environment: Call <code>init_environment</code> to initialize the Task environment within Runtime.</li> <li>Start Agent: Call <code>_start_agent</code> to create an Agent instance, start it, and configure various action listeners.</li> <li>Begin Task Flow: Call <code>start_task</code> to start the Task data source.</li> <li>Evaluate Task: Call <code>evaluate_task</code> to collect test results after the data source ends, archive them, and invoke evaluation functions.</li> </ul> <pre><code>def start_test_agent(self):\n    self.task.init_environment(self.runtime)\n    self._start_agent()\n    self.task.start_task(self.runtime)\n    self.task.evaluate_task(self.runtime)\n</code></pre> <pre><code>def _start_agent(self):\n    namespace = {}\n    exec(self.agent_str, globals(), namespace)\n\n    class_object = None\n    globals().update(namespace)\n    for name, obj in namespace.items():\n        if isinstance(obj, type):\n            class_object = obj\n            break\n\n    if class_object is not None:\n        self.agent_instance = class_object()\n        self.agent_instance.start()\n</code></pre> <p>Tip</p> <p>During development, you can add multiple custom exception classes like <code>ExecError</code>, <code>StartError</code>, <code>RunningError</code>, etc., to capture and handle different stages' potential error scenarios, improving testing efficiency.</p>"},{"location":"AgentDevelopmentGuide/SANDBOX_GUIDE/#3-testing-example","title":"3. Testing Example","text":"<p>Success</p> <p>Below is an example demonstrating how to use the <code>SandBox</code> class for specific Task testing.</p> <p>Here's how you can use the <code>SandBox</code> class for specific Task testing:</p> <pre><code>if __name__ == \"__main__\":\n    from tasks import ALL_TASKS\n    ArxivTaskConfig = ALL_TASKS['ArxivTask']\n\n    agent_file = '''\n    import chainstream as cs\n    from chainstream.llm import get_model\n\n    class TestAgent(cs.agent.Agent):\n        def __init__(self):\n            super().__init__(\"test_arxiv_agent\")\n            self.input_stream = cs.get_stream(\"all_arxiv\")\n            self.output_stream = cs.get_stream(\"cs_arxiv\")\n            self.llm = get_model([\"text\"])\n\n        def start(self):\n            def process_paper(paper):\n                if \"abstract\" in paper:\n                    paper_title = paper[\"title\"]\n                    paper_content = paper[\"abstract\"]\n                    paper_versions = paper[\"versions\"]\n                    stage_tags = ['Conceptual', 'Development', 'Testing', 'Deployment', 'Maintenance','Other']\n                    prompt = \"Give you an abstract of a paper: {} and the version of this paper:{}. What tag would you like to add to this paper? Choose from the following: {}\".format(paper_content,paper_versions, ', '.join(stage_tags))\n                    prompt_message = [\n                        {\n                            \"role\": \"user\",\n                            \"content\": prompt\n                        }\n                    ]\n                    response = self.llm.query(prompt_message)\n                    print(paper_title+\" : \"+response)\n                    self.output_stream.add_item(paper_title+\" : \"+response)\n\n            self.input_stream.register_listener(self, process_paper)\n\n        def stop(self):\n            self.input_stream.unregister_listener(self)\n    '''\n\n    oj = SandBox(ArxivTaskConfig(), agent_file)\n    oj.start_test_agent()\n</code></pre> <p>In this example, we have defined a specific Task. The <code>agent_file</code> includes the Agent required to execute this Task. This allows us to instantiate and start the <code>TestAgent</code>, testing its performance.</p>"},{"location":"AgentGenerator/QUICK_START/","title":"QUICK START","text":"<p>TODO: finish this section</p>"},{"location":"AgentGenerator/QUICK_START/#what-is-agentgenerator","title":"What is AgentGenerator?","text":""},{"location":"AgentGenerator/QUICK_START/#how-to-use-agentgenerator","title":"How to use AgentGenerator?","text":""},{"location":"AgentGenerator/QUICK_START/#how-to-evaluate-agent-generator-on-nl-sense-benchmark","title":"How to evaluate agent generator on NL-Sense Benchmark ?","text":""},{"location":"ChainStreamDevelopmentGuide/AGENT_GENERATOR_DEVELOPMENT_GUIDE/","title":"Agent Generator Development Guide","text":"<p>// wait for wenxing</p>"},{"location":"ChainStreamDevelopmentGuide/AGENT_STORE_DEVELOPMENT_GUIDE/","title":"Agent Store Development Guide","text":"<p>// comming soon</p>"},{"location":"ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/","title":"ChainStream Development Overview","text":""},{"location":"ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#system-architecture","title":"System Architecture","text":"<p>Please see ChainStream System Architecture Design for more details.</p>"},{"location":"ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#main-components","title":"Main Components","text":"<ul> <li>ChainStream Runtime: The runtime module is responsible for executing the ChainStream application, including application scheduling, resource management, and data flow.</li> <li>ChainStream SDK: The SDK module provides developers with interfaces for application development, data flow, and resource management.</li> <li>ChainStream Agent Generator: The Agent generator module is responsible for generating Agent code based on the application description file.</li> <li>ChainStream Dashboard: The control panel module provides visualized application management, monitoring, and alarming functions.</li> <li>ChainStream Agent Store: The Agent repository module provides storage, distribution, and update functions for Agent code.</li> <li>ChainStream SandBox: The sandbox module provides online debugging and testing capabilities for developers.</li> <li>ChainStream Doc: The documentation module provides the writing, publishing, and management of ChainStream-related documents.</li> <li>ChainStream Edge Sensor: The edge sensor module provides access, management, and data collection capabilities for edge computing devices.</li> </ul>"},{"location":"ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#join-the-development","title":"Join the Development","text":""},{"location":"ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#project-communication","title":"Project Communication","text":"<p>We maintain a public Zulip chat room for ChainStream development. Please join us and discuss with us. The link is: mobilellm.zulipchat.com</p> <p>You can contact ChainStream members directly through Zulip. You can also contact us by email jia.cheng.liu@qq.com.</p>"},{"location":"ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#project-management","title":"Project Management","text":"<p>Zulip play a role in project management.</p> <p>Github Project and Issue also play a role in project management. You can follow ChainStream-Team planning and ChainStream Issues.</p>"},{"location":"ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#branch-management","title":"Branch Management","text":"<ul> <li>Main branch: main</li> <li>Dev branch: dev</li> <li>Feature branch: feature/xxx</li> <li>Fix branch: fix/xxx</li> <li>Docs branch: docs/xxx</li> <li>Temp branch: temp/xxx</li> <li>Docs page: gh-pages</li> </ul>"},{"location":"ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#code-style","title":"Code Style","text":"<p>There are no specific development guidelines at the moment, including issue, PR, and commit message. We welcome suggestions from everyone.</p> <p>The main points to keep in mind are:</p> <ol> <li>Communicate with us through various channels, including email, Zulip, and Github Issue, to let us know your ideas and opinions about the project.</li> <li>Code style and naming conventions.</li> <li>It is recommended to use unit tests and integration tests.</li> <li>Try to describe your modifications in the PR.</li> </ol>"},{"location":"ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/","title":"Project MkDocs Development Guide","text":"<p>This project uses mkdocs as the documentation framework and the Material for MkDocs theme.</p> <p>Mkdocs can compile markdown files into html files and deploy them to github pages. Most of the website configuration has been completed, only the markdown files need to be written.</p>"},{"location":"ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/#installation-for-mkdocs-and-material-for-mkdocs","title":"Installation for MkDocs and Material for MkDocs","text":"<pre><code>pip install mkdocs\npip install mkdocs-material\npip install mike\npip install mkdocs-rss-plugin\npip install mkdocs-minify-plugin\npip install mkdocs-static-i18n\n</code></pre>"},{"location":"ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/#commands-for-mkdocs","title":"Commands for MkDocs","text":"<pre><code># Local preview, need to cd to mkdocs directory, will start a local server on port 8000\nmkdocs serve\n\n# Deployment, need to cd to mkdocs directory, will automatically deploy the latest documentation to the gh-pages branch of the github repo\nmkdocs gh-deploy --force\n\n# Update the latest version alias\nmike deploy --push --update-aliases x.x latest\n</code></pre>"},{"location":"ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/#development-flow","title":"Development Flow","text":"<p>notice branch</p> <p>The documentation is mainly developed on the doc branch, please do not switch the branch to the wrong one.</p> <ol> <li>Switch to the doc branch</li> <li>cd to the ChainStream/mkdoc directory and run the <code>mkdocs serve</code> command to start a local server on port 8000</li> <li>Write markdown files in the ChainStream/mkdoc/docs directory and save</li> <li>If you add a new branch, you need to configure the nav configuration in the ChainStream/mkdoc/mkdocs.yml file</li> <li>Save the changes, and then access http://localhost:8000/ to see the latest documentation</li> <li>After confirming, commit the code to the doc branch and push it to the github repository</li> <li>Use the <code>mkdocs gh-deploy</code> command to automatically deploy the latest documentation to the gh-pages branch of the github repository</li> <li>Wait for a few minutes, and then you can see the latest documentation in https://chainstream.github.io/ChainStream/</li> </ol>"},{"location":"ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/#support-for-double-language","title":"Support for Double Language","text":"<p>This project uses the mkdocs-static-i18n plugin to support double-language.</p> <p>Specifically, this project has been configured with two languages, English and Chinese, and the default language is Chinese. The default configuration in the mkdocs.yml file uses the English configuration. If you want to support Chinese, you need to construct a markdown file with the same name but with a .zh.md suffix.</p> <p>Additionally, in the mkdocs.yml file, the nav_translations: option is used to implement navigation bar translations for different languages.</p>"},{"location":"ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/#reference","title":"Reference","text":"<p>Reference</p> <p>Although the following document is longer, over 90% of the questions can be found in the links below.</p> <ul> <li>https://www.mkdocs.org/</li> <li>https://squidfunk.github.io/mkdocs-material/</li> <li>https://github.com/jimporter/mike</li> <li>https://www.5axxw.com/wiki/content/6mmwzj</li> <li>http://www.cuishuaiwen.com:8000/zh/PROJECT/TECH-BLOG/mkdocs_and_material/#material_3</li> </ul>"},{"location":"ChainStreamDevelopmentGuide/RUNTIME_DEVELOPMENT_GUIDE/","title":"Runtime Development Guide","text":"<p>//TODO</p>"},{"location":"ChainStreamDevelopmentGuide/SDK_DEVELOPMENT_GUIDE/","title":"SDK Development Guide","text":"<p>//TODO</p>"},{"location":"Demo/GLASSES_CAMERA/","title":"GLASSES CAMERA","text":"<p>We explored the application of ChainStream in smart glasses. We attempted to quickly deploy a simple visual perception Agent developed based on ChainStream onto the smart glasses.</p> <p>Specifically, we wanted the glasses to constantly check if the toys appearing in the field of view are my toys. Of course, toys here refer to any recognizable objects and can be replaced with other objects, faces, etc., in actual applications.</p>"},{"location":"Demo/GLASSES_CAMERA/#designing-the-agent","title":"Designing the Agent","text":"<p>We designed the task in two steps: detecting whether there is a toy in the current field of view and identifying the specific toy. Then we conveniently wrote the following Agent based on ChainStream:</p> <pre><code>import chainstream as cs\n\nclass ToyRecognitionAgent(cs.agent.Agent):\n    is_agent = True\n\n    def __init__(self, agent_id='toy_recognition_agent'):\n        super().__init__(agent_id)\n        self._source = cs.get_stream('socket_front_camera_video')\n        self.know_toy = cs.memory.fetch('known_toy').select_keys(['name', 'img'])\n        self._llm = cs.llm.get_model('gpt-4-vision')\n        self.video_buffer = cs.context.VideoBuffer(duration=10)\n\n        self.has_toy = cs.create_stream('has_toy')\n\n    def start(self):\n        def handle_new_frame(frame):\n            self.video_buffer.save(frame['frame'])\n            prompt = \"Is there a toy in the frame? Simply answer Yes or No\"\n            img = self.video_buffer.snapshot()\n            img.show()\n            response = self._llm.query(prompt, img).lower().strip()\n            print(response)\n            if response.startswith('yes'):\n                self.has_toy.send_item({'video_frame': img})\n\n        def recognize_toy(has_toy):\n            now_toy_frame = has_toy['video_frame']\n            imgs = [now_toy_frame]\n            names = \"\"\n            for toy in self.know_toy:\n                imgs.append(toy['img'])\n                if len(imgs) == 2:\n                    names += f\"'{toy['name']}'\"\n                elif len(imgs) == len(self.know_toy) + 1:\n                    names += f\" ,and '{toy['name']}'\"\n                else:\n                    names += f\", '{toy['name']}'\"\n\n            prompt = (f\"Is there a toy in the first picture that I already recognize? If so, please answer yes first, \"\n                      f\"and then tell me the names I gave them. The last few pictures are all the toys I know, \"\n                      f\"and I named them {names}. Please note that I only recognize the toys shown except for the \"\n                      f\"first picture. You cannot answer yes to a toy that is not on display even if you know the \"\n                      f\"toy. And the names you answer must also correspond to the names I chose, even though these \"\n                      f\"names may be strange or even inconsistent with common cognition.\")\n\n            response = self._llm.query(prompt, imgs)\n            print(response)\n\n        self._source.register_listener(self, handle_new_frame)\n        self.has_toy.register_listener(self, recognize_toy)\n\n        return True\n\n    def pause(self):\n        self._source.unregister_listener(self)\n\n    def stop(self):\n        self._source.remove_listener(self)\n</code></pre>"},{"location":"Demo/GLASSES_CAMERA/#adding-memory","title":"Adding Memory","text":"<p>Next, we added images and names of the following three toys to the memory of the Agent:</p> <p></p>"},{"location":"Demo/GLASSES_CAMERA/#configuring-the-edge-sensor","title":"Configuring the Edge Sensor","text":"<p>We used the Thunderbird X2 smart glasses and installed the ChainStream Client App on them. When the app is launched, the device can be connected to ChainStream.</p>"},{"location":"Demo/GLASSES_CAMERA/#running-the-agent","title":"Running the Agent","text":"<p>We wore the smart glasses and started the Agent written above, obtaining the following results:</p> <p></p> <p>As can be seen, the Agent can perform our task fairly accurately. Although the accuracy is not perfect, the main goal of this demo is to showcase the convenience and flexibility of ChainStream. Object detection is also not the specialty of the GPT-4 model.</p> <p>The accuracy depends on how the Agent is written. If you want to improve the task's effectiveness, you can use a specialized detection model like YOLO in the Agent.</p>"},{"location":"DesignBlog/LLMRuntimeOptimize/","title":"Runtime Optimization - LLM","text":"<p>Note Introduction</p> <p>This note records the process and main ideas for designing and modifying the ChainStream LLM. It is currently incomplete and mainly resides in the RuntimeOptimize branch, associated with Issue#86 RuntimeOptimize - Existing Model Selection and Fine-Tuning New Models.</p>"},{"location":"DesignBlog/LLMRuntimeOptimize/#objective","title":"Objective","text":"<p>In the future, ChainStream will operate a large-scale Stream flow graph, leading to significant computational load both per unit time and cumulatively over long periods of uptime. This will result in substantial token fee costs. Currently, there are many types of LLMs with varying performance levels. However, for user developers, the chosen LLM only needs to meet their requirements. Often, the strongest and most expensive models are selected to maximize performance, resulting in unnecessary additional costs.</p> <p>ChainStream aims to optimize token fees from a system perspective. This primarily involves two parts: custom models and model selection:</p> <ul> <li>Custom Models: For a specific task, attempt to fine-tune a custom LLM after accumulating a certain amount of data.</li> <li>Model Selection: Choose among the strongest cloud model, a standard cloud model, a local model, and a custom model to find a trade-off between cost and effectiveness.</li> </ul> <p>Here, we will primarily discuss the design of model selection.</p> <p>The goals for model selection include:</p> <ul> <li>LLM API specifies only the model type, such as text-only models, vision models, speech models, etc.</li> <li>ChainStream Runtime provides support for various LLM interface classes, including common cloud and local LLMs.</li> <li>Monitor the performance of different model types over time and select the optimal model based on their performance.</li> <li>Schedule all requests for different model types in real-time.</li> </ul>"},{"location":"DesignBlog/LLMRuntimeOptimize/#model-selection","title":"Model Selection","text":"<p>ChainStream automatically detects the performance of the LLM used in each task and selects a more suitable specific model accordingly. Users only need to specify the required LLM type.</p> <p></p> <p>The detailed design includes the following parts:</p> <ul> <li>API: Determine the number of LLM types to support.</li> <li>LLM SDK:</li> <li><code>get_model</code> returns the LLM interface class based on the LLM type.</li> <li>The LLM interface class does not execute the actual query.</li> <li>Attach a recorder to each LLM interface class.</li> <li>Runtime:</li> <li>The LLM manager manages each instance of the LLM interface class.</li> <li>Attach a router to each LLM interface class, selecting the LLM type based on the performance of the node itself and downstream nodes.</li> <li>Abstraction Layer:</li> <li>Support various LLM models, encapsulating model instance classes for each LLM type.</li> <li>Attach a recorder to each LLM instance class to record runtime performance data.</li> <li>Attach a query queue to each LLM instance class, scheduling based on the source agent's priority and traffic conditions.</li> <li>Evaluation:</li> <li>Use the ChainStream benchmark to evaluate the accuracy and cost of this method. The strongest model serves as the upper limit for accuracy, while the cheapest model serves as the lower limit for costs.</li> </ul>"},{"location":"DesignBlog/LLMRuntimeOptimize/#class-design","title":"Class Design","text":"<ul> <li>API Layer:<ul> <li><code>get_model(model_type)</code>: Retrieves the <code>LLMInterface</code> class based on the model type.</li> </ul> </li> <li>LLM SDK Layer:<ul> <li><code>LLMInterface</code> Class: Connects to the backend LLM instance via <code>LLMRouter</code> based on the specific type.</li> <li><code>LLMInterfaceRecorder</code> Class: Records the operational status of the <code>LLMInterface</code> class.</li> </ul> </li> <li>Runtime Layer:<ul> <li><code>LLMManager</code> Class: Manages <code>LLMInstance</code> instances, facilitating the connection between <code>LLMInterface</code> and <code>LLMInstance</code> through <code>LLMRouter</code>.</li> <li><code>LLMRouter</code> Class: Selects the appropriate <code>LLMInstance</code> for <code>LLMInterface</code> based on node performance and traffic conditions.</li> <li><code>LLMInstance</code> Class: Encapsulates specific models of LLM instances, and includes <code>LLMRecorder</code> and a query queue.</li> </ul> </li> <li>Config:<ul> <li>Defines configuration parameters for various LLM models.</li> <li>Configures the form of <code>LLMRouter</code>.</li> </ul> </li> </ul>"},{"location":"NLSenseBenchmark/QUICK_START/","title":"QUICK START","text":"<p>TODO: finish this section.</p>"},{"location":"NLSenseBenchmark/QUICK_START/#what-is-the-nl-sense-benchmark","title":"What is the NL-Sense Benchmark?","text":""},{"location":"NLSenseBenchmark/QUICK_START/#preparation","title":"Preparation","text":""},{"location":"NLSenseBenchmark/QUICK_START/#simulation","title":"Simulation","text":""},{"location":"NLSenseBenchmark/QUICK_START/#single-task","title":"Single-Task","text":""},{"location":"NLSenseBenchmark/QUICK_START/#multi-task","title":"Multi-Task","text":""},{"location":"NLSenseBenchmark/QUICK_START/#evaluation","title":"Evaluation","text":""},{"location":"NLSenseBenchmark/QUICK_START/#execute-rate","title":"Execute Rate","text":""},{"location":"NLSenseBenchmark/QUICK_START/#result-score","title":"Result Score","text":""},{"location":"SystemOverview/CHAINSTREAM_FRAMEWORK_OVERVIEW/","title":"ChainStream Framework Architecture","text":"<p>The diagram above illustrates the architecture of the ChainStream framework in a narrow sense. The ChainStream framework mainly comprises the following layers:</p> <ol> <li>Agent Layer: Includes user agents and system agents, similar to user apps and system apps in the Android system. User agents are those that users can freely install and uninstall to meet specific user needs, whereas system agents are essential components necessary for system operations, responsible for core system functions.</li> <li>Libraries Layer: Provides the core abstractions of ChainStream, mainly including parts such as Stream, Agent, Models, Memory, and Prompt.</li> <li>Runtime Layer: Responsible for maintaining the global streaming computation graph, executing optimization and scheduling, and managing and allocating resources.</li> <li>Abstraction Layer: Offers unified virtualization of resources, primarily including computational model resources, interface resources, data source resources, and more.</li> <li>Infrastructure Layer: Manages underlying hardware resources, including CPU, GPU, network, storage, and others.</li> </ol>"},{"location":"SystemOverview/CODE_STRUCTURE/","title":"Code Structure","text":"<p>The current directory structure of the ChainStream repository is as follows:</p> <pre><code>ChainStream\n\u251c\u2500 AgentGenerator      # Tool for generating ChainStream Agents from natural language\n\u251c\u2500 AgentStore          # Agent store\n\u251c\u2500 chainstream         # Framework code\n\u251c\u2500 ChainStreamClient   # Edge Sensor App\n\u251c\u2500 ChainStreamSandBox  # Agent testing sandbox\n\u251c\u2500 ChainStreamTest     # Unit tests\n\u2514\u2500 mkdoc               # Documentation\n</code></pre>"},{"location":"SystemOverview/SYSTEM_OVERVIEW/","title":"ChainStream System Overview","text":"<p>In a narrow sense, ChainStream is mainly an LLM Agent development framework, centered around its provided APIs and runtime, we will discuss this part of the system in detail in the ChainStream Framework Architecture. Broadly speaking, ChainStream also includes the various components shown in the image above, which primarily consist of:</p> <ul> <li>Sensor Agents: Perception agents developed using the ChainStream SDK and running within the ChainStream Runtime.</li> <li>ChainStream SDK: Provides the necessary APIs for developing Sensor Agents, including functions for data collection, data processing, and data transmission.</li> <li>ChainStream Runtime: Runs Sensor Agents, maintains a global streaming computation graph, controls various edge devices, and manages global resources.</li> <li>Edge Sensor: Provides apps for systems like Android, Linux, and Windows, capable of integrating the data sources on these devices into the ChainStream Runtime.</li> <li>Dashboard: The control panel for ChainStream Runtime, mainly used for visualization, configuration, control, and analysis of the runtime.</li> <li>Agent Generator: A tool that can directly convert natural language descriptions of agents into code, which then runs in the ChainStream Runtime.</li> <li>Sandbox: A simulation environment for agents, enabling the simulation of the environment in which the agents will run and providing functionalities for agent development, debugging, and testing.</li> <li>Agent Store: A repository for agents, offering functionalities for sharing, publishing, and searching for agents.</li> </ul>"},{"location":"SystemOverview/SYSTEM_SCENARIOS/","title":"ChainStream Application Scenarios","text":""},{"location":"SystemOverview/SYSTEM_SCENARIOS/#continuous-perception","title":"Continuous Perception","text":"<p>Our ideal agent perception is seamless, continuous in time, data range, and in the perception process and results.</p> <ul> <li>Continuous in time: The agent's perception is uninterrupted, constantly perceiving everything within its field of view and recording what it deems important.</li> <li>Continuous in data range: The agent's perception can span multiple data sources. ChainStream provides Edge Sensors to bridge different devices, sensors, and data sources.</li> <li>Continuous in perception process and results: Different agents' perception steps can intersect, and results can be reused, breaking the boundaries between agents.</li> </ul>"},{"location":"SystemOverview/SYSTEM_SCENARIOS/#chainstream-product-architecture","title":"ChainStream Product Architecture","text":"<p>The main product architecture of ChainStream consists of a three-tier system: multi-edge sensing devices + local server + cloud server.</p> <ul> <li>Multi-edge devices: Known as Edge Sensors, these act as the senses and appendages of the entire system, responsible for transmitting sensor data to the local server and executing corresponding actions based on instructions, such as notifications and sound playback.</li> <li>Local server: A trusted server deployed locally by each user, responsible for connecting and controlling edge devices, performing main ChainStream computations, hosting local large models, storing high-privacy data, and more.</li> <li>Cloud server: A supplementary service provided by ChainStream cloud service providers, including more powerful cloud large models, cloud storage, and an Agent Store.</li> </ul> <p>It is clear that due to privacy and security considerations, a significant portion of ChainStream's computation and storage is done locally. Therefore, users need to configure edge devices, local servers, and trusted local area networks according to their needs.</p>"},{"location":"SystemOverview/SYSTEM_SCENARIOS/#scenario-examples","title":"Scenario Examples","text":"<p>ChainStream is aimed at a variety of users, including but not limited to:</p> <ul> <li>Individuals</li> <li>Families</li> <li>Enterprises</li> <li>Shops, offices, schools</li> </ul> <p>Each ChainStream system is shared by all users, terminals, and devices within the user's range.</p> <p></p> <p>In our vision, ChainStream can be applied to the scenarios shown above:</p> <ul> <li>Personal Assistant: Mainly connects personal phones, wearable devices, smart furniture, and other devices. It perceives the daily life of individual users and provides personalized services.</li> <li>Family Assistant: Mainly connects family members' phones, smart furniture, and other devices. It perceives the daily life of family members and provides family services.</li> <li>Enterprise Assistant: Mainly connects employees' phones, office equipment, and other devices. It perceives the daily work of employees and provides enterprise services.</li> <li>Professional Scenario Assistant: Refers to specialized environments like kitchens, workshops, laboratories, assembly line workshops, and more. It perceives the daily work in professional scenarios, functioning as a log recorder, compliance checker, process guide, and more.</li> </ul>"},{"location":"SystemOverview/WHAT_IS_CHAINSTREAM/","title":"What is ChainStream?","text":"<p>ChainStream is a framework that aims to better support long-term perception capabilities of Agent implementation. The framework uses a multi-layered event-driven stream-based structure, which is designed to realize Agent's long-term perception capability and information sharing capability.</p>"},{"location":"SystemOverview/WHAT_IS_CHAINSTREAM/#what-is-a-stream-what-is-event-driven","title":"What is a Stream? What is Event-driven?","text":"<p>Stream is a data pipeline, similar to a water pipe, with an entrance and an exit. Any content can be placed into the stream at any time, and the data will automatically flow downstream to the Agent.</p> <p>Stream and Agent are related through listening, which is similar to Youtube channel subscription: - Youtube user subscribes to a channel, and when a new video is published, Youtube will automatically push it to the user. - Agent listens to a stream, and when new data is pushed to the stream, ChainStream will automatically push it to the Agent.</p> <p>This pre-listening and automatic pushing mechanism is the core of event-driven architecture. The main advantage of event-driven architecture is that it reduces unnecessary computations in large computation graphs.</p>"},{"location":"SystemOverview/WHAT_IS_CHAINSTREAM/#what-is-an-agent-in-chainstream","title":"What is an Agent in ChainStream?","text":"<p>The functionalities of an Agent in ChainStream can be subscribed to a stream or written to a stream. An Agent is a logical concept that can include one or more functions.</p> <p>We can view Agent Function as a transformation function in a stream. For example, for a monitoring camera, it can be considered as the source of a continuous video stream, and the unit of the stream is a video frame. When we construct a Person Detection Agent, it can subscribe to this video stream, perform object detection on it, and push the frames with people to a new stream. We obtain the Person Stream. Further, we can listen to a Face Recognition Agent to produce a Face Stream. We can construct a complex Agent stream graph in this way.</p> <p>Based on the above example, we can see that the core idea of ChainStream is to implement perception tasks through multiple atomic transformation steps. And each intermediate step in the stream can be used by other Agents. This makes sharing between Agents more convenient.</p> <p>For the ChainStream Runtime, its job is to maintain a large Stream Flow Graph that is merged from all Agents, and to implement automatic pushing of streams through event-driven mechanisms. It also performs various system optimizations on the Graph.</p>"},{"location":"SystemOverview/WHAT_IS_CHAINSTREAM/#chainstream-vs-agent-frameworks","title":"ChainStream VS Agent Frameworks","text":"<p>There are many Agent frameworks out there, some of them are mature and large, such as LangChain, AutoGPT, MetaGPT. What are the differences between ChainStream and these frameworks?</p> <p>The most obvious difference is that ChainStream is still relatively small It has a smaller size compared to other frameworks, and it is still in its early stage of development.</p> <p>However, the core difference is that:</p> <ul> <li>Different types of Agents: Most existing Agent frameworks are designed for Problem-solving Agents, while ChainStream is mainly designed for Context-aware Agents, which require long-term perception capabilities.</li> <li>Focus on Perception: ChainStream currently concentrates on better solving long-term perception problems. As far as we know, ChainStream is the first framework to develop independent modules specifically for perception.</li> <li>Unique Structure: All agents are integrated into a large event-driven flow graph, facilitating information sharing among agents and global system optimization.</li> <li>Edge-oriented: While most agent frameworks are cloud-oriented, ChainStream focuses on edge scenarios, attempting to bridge the sensor boundaries between different edge devices.</li> </ul> <p>Overall, ChainStream, as a relatively new conceptual framework, is still in its early stages. In the short term, we hope it can focus on enhancing the long-term perception capabilities of agents, providing a refined and efficient solution for agent perception. In the long term, we also envision ChainStream becoming a comprehensive framework for large-scale agent development, exploring its potential for edge application development and deployment. We aim to leverage the open-source community to improve its capabilities in all aspects.</p>"},{"location":"UserGuide/AGENT_STORE_GUIDE/","title":"Agent Store Guide","text":"<p>// comming soon</p>"},{"location":"UserGuide/DASHBOARD_GUIDE/","title":"Control Panel Guide","text":"<p>We provide two methods to interact with the ChainStream Runtime: Web and shell. We recommend using the Web method as it is more intuitive and feature-rich.</p> <p>By default, when you run the <code>python start.py</code> command, the ChainStream Runtime will automatically open the Web control panel at the default address <code>http://localhost:6677</code>.</p> <p>The Web control panel is currently in the testing phase, and its functionalities are not yet complete. We have reserved interfaces for planned features, which will be gradually improved.</p> <p>The currently implemented features mainly include Agent management, Stream monitoring, and Stream Flow Graph monitoring.</p>"},{"location":"UserGuide/DASHBOARD_GUIDE/#managing-agents","title":"Managing Agents","text":"<p>The left-hand list automatically scans and loads all Agents from the specified path, allowing you to start, stop, restart, or delete Agents.</p> <p>The right-hand side displays basic information about running Agents, including Agent ID, Agent name, Agent type, Agent status, Agent creation time, and more.</p>"},{"location":"UserGuide/DASHBOARD_GUIDE/#monitoring-the-stream-flow-graph","title":"Monitoring the Stream Flow Graph","text":"<p>The dynamic graph shows the current streaming computation graph of the system, providing an intuitive view of the topology and statistical information of the connections between various Agents.</p>"},{"location":"UserGuide/EDGE_SENSOR_USER_GUIDE/","title":"ChainStream Edge Devices","text":"<p>We currently provide a ChainStream Client App for Android, allowing Android devices to quickly connect to the ChainStream system.</p> <p>At present, the app can only be installed by compiling from source, which is somewhat cumbersome. We will provide an APK installation package as soon as possible, so please stay tuned to our official website.</p>"},{"location":"UserGuide/EDGE_SENSOR_USER_GUIDE/#edge-device-structure-diagram","title":"Edge Device Structure Diagram","text":"<p>The interface shown in the diagram is a screenshot from the current version of the ChainStream Client App. The small window displays the real-time camera feed, which is simultaneously streamed to the corresponding stream on the local server.</p>"},{"location":"UserGuide/QUICK_START/","title":"Quick Start","text":""},{"location":"UserGuide/QUICK_START/#system-structure","title":"System Structure","text":"<p>As mentioned in the ChainStream Application Scenarios, the ideal ChainStream product structure includes three tiers: edge devices, local server, and cloud server. Currently, the system has implemented the functionalities of the edge devices and local server, while the cloud server functionality is still under development.</p> <p>We provide an Edge Sensor App for the Android system. Once the app is installed on a device, it can quickly connect the edge device to the local server.</p> <p>For the local server, the environment currently needs to be configured and run manually. In the future, we plan to support Docker and release packaged applications.</p>"},{"location":"UserGuide/QUICK_START/#local-server-configuration-and-startup","title":"Local Server Configuration and Startup","text":"<p>First, clone the project code from GitHub:</p> <pre><code>git clone https://github.com/MobileLLM/ChainStream.git\n</code></pre> <p>Then, install the dependencies in the appropriate interpreter:</p> <pre><code>pip install -e .\n</code></pre> <p>Finally, start the local server:</p> <pre><code>python start.py\n</code></pre> <p>Then, open the web browser and go to <code>http://localhost:6677/</code>. You should see the home page of the local server.</p>"},{"location":"zh/","title":"ChainStream\u4e2d\u6587\u6587\u6863","text":"<p>A Stream-based LLM Agent Framework for Continuous Context Sensing and Sharing </p> <p>\u4e00\u4e2a\u6d41\u5f0f\u7684LLM\u667a\u80fd\u4f53\u6846\u67b6\uff0c\u7528\u4e8e\u8fde\u7eed\u4e0a\u4e0b\u6587\u611f\u77e5\u548c\u5171\u4eab\u3002</p> <p>\u6b22\u8fce\u6bcf\u4e2a\u53c2\u4e0e\u8005! </p> <p>\u6b22\u8fce\u6240\u6709\u4eba\u53c2\u4e0e\u5230ChainStream\u7684\u5f00\u53d1\u548c\u4f7f\u7528\u4e2d\u6765\uff0c\u65e0\u8bba\u662f\u5f00\u53d1\u8005\u3001\u7528\u6237\u3001\u8d21\u732e\u8005\u3001\u6216\u8005\u5176\u4ed6\u4efb\u4f55\u89d2\u8272\u3002</p> <p>\u52a0\u5165\u6211\u4eec! </p> <p>ChainStream \u4ecd\u5728\u5f00\u53d1\u4e2d\uff0c \u6211\u4eec\u6b22\u8fce\u6240\u6709\u7528\u6237\u3001\u5efa\u8bae\u8005\u548c\u8d21\u732e\u8005\u53c2\u4e0e\u3002 \u6b22\u8fce\u901a\u8fc7Github Repo\u6216Zulip Group\u4e0e\u6211\u4eec\u8054\u7cfb\u3002 \u540c\u6837\u7684\uff0c\u672c\u6587\u6863\u4ecd\u5728\u5f00\u53d1\u4e2d\uff0c\u8bf7\u5b9a\u671f\u67e5\u770b\u66f4\u65b0\u3002</p>"},{"location":"zh/#_1","title":"\u6587\u6863\u7ed3\u6784","text":"<p>\u5bf9\u4e8e\u6bcf\u4e2a\u8bfb\u8005\uff0c\u6211\u4eec\u90fd\u5efa\u8bae\u60a8\u5148\u9605\u8bfb\uff1a</p> <ul> <li> ChainStream\u6982\u89c8 \u4e86\u89e3ChainStream\u7684\u57fa\u672c\u6982\u5ff5\u548c\u529f\u80fd\u3002</li> </ul> <p>\u672c\u6587\u6863\u9762\u5411\u4e09\u4e2a\u4e3b\u8981\u53d7\u4f17\uff1a</p> <ul> <li> ChainStream\u7528\u6237 \u9002\u7528\u4e8e\u5e0c\u671b\u4f7f\u7528ChainStream\u6784\u5efa\u81ea\u5df1\u7684\u667a\u80fd\u4f53\u6216\u5c06\u5176\u96c6\u6210\u5230\u73b0\u6709\u7cfb\u7edf\u4e2d\u7684\u7528\u6237\u3002</li> <li> Agent\u5f00\u53d1\u8005 \u9002\u7528\u4e8e\u5e0c\u671b\u4e86\u89e3ChainStream\u7684\u5185\u90e8\u5de5\u4f5c\u539f\u7406\u5e76\u6784\u5efa\u81ea\u5df1\u7684\u667a\u80fd\u4f53\u7684\u5f00\u53d1\u8005\u3002</li> <li> ChainStream\u7cfb\u7edf\u8d21\u732e\u8005 \u9002\u7528\u4e8e\u5e0c\u671b\u4e3aChainStream\u7684\u5f00\u53d1\u505a\u51fa\u8d21\u732e\u7684\u7cfb\u7edf\u5f00\u53d1\u8005\u3002</li> </ul>"},{"location":"zh/#_2","title":"\u66f4\u65b0\u65e5\u5fd7","text":"<ul> <li>2024.06: ChainStream\u7f51\u9875\u4e0a\u7ebf\u3002</li> <li>2024.06: ChainStream\u9879\u76ee\u7ec4\u4e8e\u4e1c\u4eac\u53c2\u52a0Mobisys2024\u5e76\u5728EdgeFM Workshop\u4e0a\u505a\u62a5\u544a\u3002\u4f1a\u8bae\u8bba\u6587\u4e4b\u540e\u5c06\u88ab\u68c0\u7d22\u3002</li> <li>2024.06: ChainStream Github Repo \u4e0a\u7ebf\u3002</li> <li>2024.05: ChainStream\u4ecb\u7ecd\u8bba\u6587\u88abMobiSys 2024, Workshop on Edge and Mobile Foundation Models\u63a5\u53d7\u3002</li> <li>2023.12: ChainStream\u5f00\u59cb\u524d\u671f\u5f00\u53d1\u3002</li> <li>2023.10: ChainStream\u9879\u76ee\u5f00\u59cb\u7b79\u5907\u3002 </li> </ul>"},{"location":"zh/#_3","title":"\u7248\u6743\u58f0\u660e","text":"<ul> <li>\u672c\u5de5\u4f5c\u7531\u6e05\u534e\u5927\u5b66\u667a\u80fd\u4ea7\u4e1a\u7814\u7a76\u9662AIoT\u56e2\u961f\u7684ChainStream\u9879\u76ee\u7ec4\u63a8\u51fa\u3002</li> <li>\u53c2\u4e0e\u8d21\u732e\u7684\u4e3b\u8981\u6210\u5458\u5305\u62ec\uff1a\u674e\u5143\u6625\u3001\u5218\u5609\u8bda\u3001\u8bb8\u6587\u661f\u3001\u674e\u4eae\u5f66\u3001\u675c\u6587\u6770\u7b49\uff0c\u540e\u7eed\u5c06\u53d1\u5e03\u66f4\u8be6\u7ec6\u7684\u5f15\u7528\u683c\u5f0f\u3002</li> </ul>"},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/","title":"ChainStream Agent\u5f00\u53d1\u6307\u5357","text":"<p>\u6458\u8981</p> <p>\u6b64\u5f00\u53d1\u6307\u5357\u63d0\u4f9b\u4e86\u8be6\u7ec6\u7684\u6b65\u9aa4\u548c\u6307\u5bfc\uff0c\u5e2e\u52a9\u5f00\u53d1\u8005\u5229\u7528 ChainStream \u6846\u67b6\u7ba1\u7406\u6570\u636e\u6d41\u548c\u521b\u5efaAgent\u3002\u901a\u8fc7\u8fd9\u4e9b\u6307\u5357\uff0c\u5f00\u53d1\u8005\u80fd\u591f\u6709\u6548\u5730\u5229\u7528 ChainStream API \u548c\u6a21\u5757\u5f00\u53d1Agent\uff0c\u5b9e\u73b0\u9ad8\u6548\u7684\u6570\u636e\u6d41\u5904\u7406\u548c\u54cd\u5e94\u673a\u5236\uff0c\u4ece\u800c\u6ee1\u8db3\u5404\u79cd\u590d\u6742\u6570\u636e\u4efb\u52a1\u7684\u9700\u6c42\u3002</p>"},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#chainstream-agent_1","title":"Chainstream Agent\u5f00\u53d1\u6a21\u5757\u4ecb\u7ecd","text":""},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#stream","title":"Stream \u6a21\u5757","text":"<ul> <li>\u63cf\u8ff0\uff1aStream \u7c7b\u662f\u6570\u636e\u6d41\u7684\u6838\u5fc3\uff0c\u6bcf\u4e00\u4e2a\u6570\u636e\u6d41\u90fd\u662f Stream \u7684\u5b9e\u4f8b\uff0c\u901a\u8fc7 stream_id \u533a\u5206\u4e0d\u540c\u7684\u6570\u636e\u6d41\u3002ChainStream \u901a\u8fc7\u6302\u8f7d\u76d1\u542c\u51fd\u6570\u5230\u6570\u636e\u6d41\u4e0a\u5b8c\u6210\u5bf9\u6570\u636e\u7684\u76d1\u542c\u4e0e\u5904\u7406\u3002</li> <li>API\uff1a</li> <li><code>chainstream.get_stream(stream_id)</code>: \u6839\u636e stream_id \u83b7\u53d6\u4e00\u4e2a Stream \u5bf9\u8c61\uff0c\u901a\u5e38\u5728\u6784\u5efa Agent \u5b9e\u4f8b\u65f6\u9700\u8981\u4f7f\u7528\u6b64\u65b9\u6cd5\u83b7\u53d6\u8f93\u5165\u548c\u8f93\u51fa\u6d41\u3002</li> <li><code>chainstream.create_stream(stream_id)</code>: \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u6570\u636e\u6d41\uff0c\u5e76\u8fd4\u56de Stream \u5b9e\u4f8b\uff0c\u4ee5 stream_id \u4f5c\u4e3a\u6807\u8bc6\u7b26\u3002</li> <li><code>chainstream.stream.Stream.register_listener(agent, listener_func)</code>: \u5411 Stream \u5b9e\u4f8b\u6302\u8f7d\u76d1\u542c\u51fd\u6570\u3002</li> <li><code>chainstream.stream.Stream.unregister_listener(agent)</code>: \u6ce8\u9500\u6570\u636e\u6d41\u4e0a\u6302\u8f7d\u7684\u76d1\u542c\u51fd\u6570\u3002</li> <li><code>chainstream.stream.Stream.add_item(data)</code>: \u5411\u6570\u636e\u6d41\u63a8\u9001\u6570\u636e\u3002</li> </ul>"},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#agent","title":"Agent \u6a21\u5757","text":"<ul> <li>\u63cf\u8ff0\uff1a\u9700\u8981\u521b\u5efa\u4e00\u4e2a\u6216\u591a\u4e2a Agent \u6765\u5b8c\u6210\u7528\u6237\u6307\u5b9a\u7684\u4efb\u52a1\u3002Agent \u5b9e\u4f8b\u9700\u8981\u7ee7\u627f <code>chainstream.agent.Agent</code> \u7c7b\uff0c\u5e76\u5411\u7236\u7c7b\u4f20\u5165 agent_id \u4f5c\u4e3a\u6807\u8bc6\u7b26\uff0c\u5e76\u5b9e\u73b0 <code>__init__</code>, <code>start()</code>, <code>stop()</code> \u65b9\u6cd5\u5b8c\u6210\u5bf9\u76f8\u5173\u6570\u636e\u6d41\u7684\u76d1\u542c\u3001\u5904\u7406\u548c\u7ed3\u679c\u8f93\u51fa\u3002</li> <li>API\uff1a</li> <li><code>__init__(agent_id)</code>: \u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u7684 Agent \u5bf9\u8c61\u6765\u521b\u5efa\u5b8c\u6210\u4efb\u52a1\u7684 Agent\uff0cagent_id \u662f\u5fc5\u8981\u7684\u53c2\u6570\uff0c\u7528\u4e8e\u6307\u5b9a Agent \u7684\u6807\u8bc6\u7b26\uff0c\u9700\u8981\u4f20\u5165\u7236\u7c7b\u4e2d\u3002\u5728\u8be5\u65b9\u6cd5\u4e2d\uff0c\u60a8\u53ef\u4ee5\u521d\u59cb\u5316\u8d44\u6e90\u548c\u6570\u636e\u6d41\u3002</li> <li><code>start()</code>: \u5b9a\u4e49\u5904\u7406\u6570\u636e\u6d41\u7684\u76d1\u542c\u51fd\u6570\uff0c\u5e76\u5c06\u5176\u7ed1\u5b9a\u5230\u76f8\u5e94\u7684\u6570\u636e\u6d41\u4e0a\u3002</li> <li><code>stop()</code>: \u6ce8\u9500\u8be5 Agent \u6302\u8f7d\u5230\u6570\u636e\u6d41\u4e0a\u7684\u6240\u6709\u76d1\u542c\u51fd\u6570\u3002</li> </ul>"},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#buffercontext","title":"BufferContext \u6a21\u5757","text":"<ul> <li>\u63cf\u8ff0\uff1a\u5982\u679c\u9700\u8981\u5bf9\u5904\u7406\u540e\u7684\u6570\u636e\u8fdb\u884c\u5b58\u50a8\uff0c\u53ef\u4ee5\u4f7f\u7528 BufferContext \u6a21\u5757\u521b\u5efa\u6570\u636e\u5bb9\u5668\uff0c\u8fd9\u4e2a\u6570\u636e\u5bb9\u5668\u662f\u4e00\u4e2a\u961f\u5217\uff0c\u53ea\u80fd\u5728\u961f\u5c3e\u6dfb\u52a0\u6570\u636e\uff0c\u961f\u9996\u53d6\u51fa\u5b58\u50a8\u7684\u6570\u636e\u3002</li> <li>API\uff1a</li> <li><code>chainstream.context.BufferContext()</code>: \u5b9e\u4f8b\u5316\u4e00\u4e2a\u65b0\u7684 BufferContext \u5bf9\u8c61\u6765\u521b\u5efa\u6570\u636e\u5bb9\u5668\u3002</li> <li><code>chainstream.context.BufferContext.add(data)</code>: \u5411\u6570\u636e\u5bb9\u5668\u7684\u961f\u5c3e\u6dfb\u52a0\u6570\u636e\u3002</li> <li><code>chainstream.context.BufferContext.get()</code>: \u53d6\u51fa\u6570\u636e\u5bb9\u5668\u961f\u9996\u7684\u6570\u636e\u3002</li> </ul>"},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#llm","title":"LLM \u6a21\u5757","text":"<ul> <li>\u63cf\u8ff0\uff1aLLM \u6a21\u5757\u96c6\u6210\u4e86\u591a\u79cd\u6a21\u578b\uff0c\u53ef\u4ee5\u5904\u7406\u591a\u79cd\u7c7b\u578b\u7684\u8f93\u5165\u6570\u636e\uff0c\u5305\u62ec\u6587\u672c\u3001\u56fe\u50cf\u548c\u58f0\u97f3\u3002\u6a21\u578b\u4f1a\u6839\u636e\u8f93\u5165\u7684\u5904\u7406\u8981\u6c42\u4ee5\u53ca\u63d0\u4f9b\u7684\u6570\u636e\u8fdb\u884c\u76f8\u5e94\u7684\u56de\u590d\u3002</li> <li>API\uff1a</li> <li><code>chainstream.llm.get_model(type)</code>: \u5b9e\u4f8b\u5316\u4e00\u4e2a LLM \u5bf9\u8c61\uff0c\u83b7\u5f97\u5904\u7406\u6570\u636e\u7684\u6a21\u578b\u3002</li> <li><code>chainstream.llm.make_prompt(query ,data)</code>: \u5c06\u5904\u7406\u8981\u6c42\u548c\u8f93\u5165\u6570\u636e\u8f6c\u6362\u6210\u6a21\u578b\u80fd\u591f\u63a5\u53d7\u7684\u8f93\u5165\u3002</li> <li><code>chainstream.llm.query(prompt)</code>: \u5411\u6a21\u578b\u53d1\u9001\u8f93\u5165 prompt\uff0c\u8fd4\u56de\u6a21\u578b\u7684\u56de\u590d\u3002</li> </ul>"},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#agent_1","title":"Agent \u5f00\u53d1\u6307\u5357","text":""},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#agent_id","title":"Agent_id","text":"<p>\u5728 Chainstream \u4e2d\uff0c<code>Agent_id</code> \u662f\u7528\u6765\u552f\u4e00\u6807\u8bc6\u4e00\u4e2a Agent \u5b9e\u4f8b\u7684\u5b57\u7b26\u4e32\u3002</p> <p>\u901a\u5e38\u5728\u521b\u5efa Agent \u65f6\uff0c\u9700\u8981\u4e3a\u5176\u6307\u5b9a\u4e00\u4e2a\u552f\u4e00\u7684 <code>Agent_id</code>\uff0c\u4ee5\u4fbf\u5728\u7cfb\u7edf\u4e2d\u8bc6\u522b\u548c\u7ba1\u7406\u4e0d\u540c\u7684 Agent\u3002</p> <ul> <li><code>Agent_id</code> \u53ef\u4ee5\u662f\u4efb\u4f55\u7b26\u5408\u547d\u540d\u89c4\u8303\u7684\u5b57\u7b26\u4e32\uff0c\u5982 <code>test_agent</code>, <code>arxiv_processor</code> \u7b49\u3002</li> <li>\u4e3a\u4e86\u907f\u514d\u51b2\u7a81\uff0c\u5efa\u8bae\u4f7f\u7528\u5177\u6709\u63cf\u8ff0\u6027\u7684\u540d\u79f0\uff0c\u5e76\u907f\u514d\u4f7f\u7528\u7279\u6b8a\u5b57\u7b26\u6216\u7a7a\u683c\u3002</li> </ul>"},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#api","title":"API \u4f7f\u7528","text":"<ul> <li>\u521b\u5efa\u65b0\u7684 Agent \u65f6\uff0c\u9700\u8981\u7ee7\u627f <code>chainstream.agent.Agent</code> \u7c7b\uff0c\u5e76\u5b9e\u73b0\u5176\u4e2d\u7684\u65b9\u6cd5\u3002</li> <li>\u5728 <code>__init__</code> \u65b9\u6cd5\u4e2d\uff0c\u9700\u8981\u8c03\u7528\u7236\u7c7b\u7684\u6784\u9020\u65b9\u6cd5\uff0c\u5e76\u521d\u59cb\u5316\u8d44\u6e90\u548c\u6570\u636e\u6d41\u3002</li> <li>\u5728 <code>start</code> \u65b9\u6cd5\u4e2d\uff0c\u5b9a\u4e49\u5904\u7406\u6570\u636e\u6d41\u7684\u76d1\u542c\u51fd\u6570\uff0c\u5e76\u5c06\u5176\u7ed1\u5b9a\u5230\u76f8\u5e94\u7684\u6570\u636e\u6d41\u4e0a\u3002</li> <li>\u9664\u4e86\u76d1\u542c\u51fd\u6570\u5916\uff0c\u901a\u5e38\u9700\u8981\u8fdb\u884c\u6570\u636e\u9884\u5904\u7406\u3001\u89e3\u6790\u3001\u6a21\u578b\u67e5\u8be2\u3001\u54cd\u5e94\u5904\u7406\u548c\u683c\u5f0f\u8f6c\u6362\u7b49\u6b65\u9aa4\u3002</li> <li>\u5728 <code>stop</code> \u65b9\u6cd5\u4e2d\uff0c\u6ce8\u9500\u8be5 Agent \u6302\u8f7d\u5230\u6570\u636e\u6d41\u4e0a\u7684\u6240\u6709\u76d1\u542c\u51fd\u6570\u3002</li> </ul>"},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#_1","title":"\u547d\u540d\u89c4\u5219","text":"<p>\u9075\u5faa Python \u7684\u547d\u540d\u89c4\u8303\uff0c\u5305\u62ec\u6a21\u5757\u3001\u7c7b\u3001\u51fd\u6570\u548c\u53d8\u91cf\u7684\u547d\u540d\u3002</p> <ul> <li>\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\u548c\u4e0b\u5212\u7ebf <code>_</code> \u5206\u9694\u7684\u65b9\u5f0f\u547d\u540d\u6a21\u5757\u548c\u6587\u4ef6\u3002</li> <li>\u7c7b\u540d\u4f7f\u7528\u9a7c\u5cf0\u547d\u540d\u6cd5\u3002</li> <li>\u51fd\u6570\u548c\u53d8\u91cf\u540d\u4f7f\u7528\u5c0f\u5199\u5b57\u6bcd\u548c\u4e0b\u5212\u7ebf <code>_</code> \u5206\u9694\u3002</li> </ul>"},{"location":"zh/AgentDevelopmentGuide/AGENT_DEVELOPMENT_OVERVIEW/#agent_2","title":"\u793a\u4f8bAgent","text":"<p>\u6210\u529f\u6848\u4f8b</p> <p>\u4e0b\u9762\u5c55\u793a\u5982\u4f55\u5728ChainStream\u4e2d\u5b9e\u73b0\u4e00\u4e2a\u63d0\u53d6Arxiv\u6458\u8981\u7684agent\uff0c\u8ba9\u6211\u4eec\u5229\u7528\u63d0\u4f9b\u7684API\u5e76\u53c2\u8003\u5f00\u53d1\u6307\u5357\u884c\u52a8\u8d77\u6765\u5427\uff01</p> <pre><code>import chainstream as cs\nfrom chainstream.llm import get_model\n\nclass TestAgent(cs.agent.Agent):\n    def __init__(self):\n        super().__init__(\"arxiv_abstract_agent\")\n        self.input_stream = cs.get_stream(\"all_arxiv\")\n        self.output_stream = cs.get_stream(\"cs_arxiv\")\n        self.llm = get_model([\"text\"])\n\n    def start(self):\n        def process_paper(paper):\n            paper_content = paper[\"abstract\"]\n            prompt = \"Is this abstract related to edge LLM agent? Say 'yes' or 'no'.\"\n            prompt = [{\"role\": \"user\", \"content\": prompt+paper_content}]\n            response = self.llm.query(prompt)\n            print(response)\n            if response == 'Yes':\n                print(paper)\n                self.output_stream.add_item(paper)\n\n        self.input_stream.register_listener(self, process_paper)\n\n    def stop(self):\n        self.input_stream.unregister_listener(self)\n</code></pre>"},{"location":"zh/AgentDevelopmentGuide/AGENT_STORE_GUIDE/","title":"Agent Store \u6307\u5357","text":"<p>\u5728\u672a\u6765\uff0c\u6211\u4eec\u4e4b\u540e\u4f1a\u63d0\u4f9b\u4e00\u4e2aAgent Store\u670d\u52a1\u5668\uff0c\u5176\u4e3b\u8981\u5305\u62ecAgent\u5305\u7684\u53d1\u5e03\u6d41\u7a0b\u3001\u5ba1\u6838\u673a\u5236\u3001\u7248\u672c\u7ba1\u7406\u3001Agent\u641c\u7d22\u7b49\u529f\u80fd\u3002</p> <p>\u76ee\u524d\uff0cAgent Store\u8fd8\u5904\u4e8e\u89c4\u5212\u9636\u6bb5\uff0c\u6211\u4eec\u76f4\u63a5\u5c06\u76ee\u524d\u521d\u6b65\u5b9e\u73b0\u7684Agent\u653e\u5728\u4e86Github\u4ed3\u5e93\u7684agents\u8def\u5f84\u4e0b\u3002\u7528\u6237\u53ef\u4ee5\u76f4\u63a5\u5728Dashboard\u4e2d\u641c\u7d22\u5230\u8fd9\u4e9bAgent\uff0c\u5e76\u76f4\u63a5\u8fd0\u884c\u3002</p>"},{"location":"zh/AgentDevelopmentGuide/AGENT_STORE_GUIDE/#agent","title":"Agent\u6253\u5305","text":"<p>\u5bf9\u4e8e\u4e00\u4e2aAgent\uff0c\u9700\u8981\u914d\u7f6e\u4ee5\u4e0b\u5185\u5bb9\uff1a</p> <ul> <li>Agent\u540d\u79f0\u3001\u63cf\u8ff0\u3001Agent\u5305\uff08zip\u683c\u5f0f\uff09</li> <li>ChainStream\u7248\u672c</li> <li>\u8bbe\u5907\u7c7b\u578b\uff1a\u684c\u9762\u3001\u624b\u673a\u3001\u773c\u955c\u3001\u624b\u8868\u7b49\uff08\u6570\u91cf\uff09</li> <li>\u90e8\u7f72\u6587\u6863\uff1a\u5982\u4f55\u90e8\u7f72\u8bbe\u5907</li> <li>\u4f9d\u8d56\uff1a\u5176\u4ed6Agent/\u6d41/\u5185\u5b58\u5fc5\u987b\u53ef\u7528\uff0c\u4ee5\u53ca\u5404\u81ea\u7248\u672c</li> <li>LLM\uff1a\u5fc5\u987b\u53ef\u7528\u6a21\u578b</li> <li>\u516c\u5171\u6d41/\u5185\u5b58\uff1a\u5176\u4ed6Agent\u53ef\u89c1\u7684\u8f93\u51fa\u6d41/\u5185\u5b58</li> </ul>"},{"location":"zh/AgentDevelopmentGuide/SANDBOX_GUIDE/","title":"\u6c99\u76d2\u6d4b\u8bd5\u6307\u5357","text":"<p>Abstract</p> <p>Sandbox\u662f\u4e00\u4e2a\u5b89\u5168\u7684\u73af\u5883\uff0c\u7528\u4e8e\u6267\u884c\u548c\u6d4b\u8bd5\u7279\u5b9aTask\u4e0b\u7684Agent\u4ee3\u7801\u3002\u901a\u8fc7\u672c\u6307\u5357\uff0c\u60a8\u5c06\u4e86\u89e3\u5982\u4f55\u5229\u7528Sandbox\u6846\u67b6\u8fdb\u884cAgent\u548cTask\u7684\u96c6\u6210\u6d4b\u8bd5\u3002\u5305\u62ec\u521d\u59cb\u5316ChainStream\u73af\u5883\u3001\u542f\u52a8\u6d4b\u8bd5Agent\u548c\u8bc4\u4f30Task\u7ed3\u679c\u7684\u6d41\u7a0b\u3002</p>"},{"location":"zh/AgentDevelopmentGuide/SANDBOX_GUIDE/#task","title":"Task\u6570\u636e\u6e90","text":"<ul> <li>daily news\uff08\u6bcf\u65e5\u65b0\u95fb\uff09</li> <li>daily dialogue\uff08\u8bed\u97f3\u8f6c\u5f55\u540e\u7684\u6587\u672c\u4fe1\u606f\uff09</li> <li>chat message\uff08\u804a\u5929\u8bb0\u5f55\uff09</li> <li>email history\uff08\u90ae\u4ef6\u5386\u53f2\u8bb0\u5f55\uff09</li> <li>daily arxiv paper\uff08\u65e5\u5e38arxiv\u8bba\u6587\uff09</li> <li>daily stock\uff08\u80a1\u7968\u8d44\u8baf\uff09</li> </ul> <p>\u66f4\u591a\u7684\u6570\u636e\u6e90\u66f4\u65b0\u4e2d...</p> <p>\u60a8\u4e5f\u53ef\u4ee5\u62d3\u5c55\u66f4\u591a\u7684\u6570\u636e\u6e90\uff0c\u5e76\u7f6e\u4e8e\u6587\u4ef6\u5939test_data\u4e0b\u3002</p>"},{"location":"zh/AgentDevelopmentGuide/SANDBOX_GUIDE/#task_1","title":"Task\u8bc4\u6d4b\u6307\u6807","text":"<ul> <li>\u8fd0\u884c\u6210\u529f\u7387\uff1aagent start\u540e\u80fd\u4e0d\u80fd\u4e0d\u62a5\u9519</li> <li>\u8f93\u5165\u8f93\u51fa\u9009\u53d6\u6b63\u786e\u6027\uff1ainput\u3001output stream\u662f\u5426\u6b63\u786e\u9009\u53d6</li> <li>\u9759\u6001\u8bc4\u6d4b\uff1aAgent Generator\u751f\u6210\u4ee3\u7801\u4e0e\u4eba\u7c7b\u4f8b\u7a0b\u7684\u5dee\u522b</li> <li>\u52a8\u6001\u8bc4\u6d4b\uff1aAgent Generator\u751f\u6210\u4ee3\u7801\u7684output stream\u4e0e\u4eba\u7c7b\u4f8b\u7a0boutput stream\u7684\u5dee\u522b</li> </ul> <p>\u66f4\u591a\u7684\u8bc4\u6d4b\u6307\u6807\u66f4\u65b0\u4e2d...</p> <p>\u60a8\u4e5f\u53ef\u4ee5\u62d3\u5c55\u66f4\u591a\u7684\u8bc4\u6d4b\u6307\u6807\uff0c\u5e76\u5199\u5728evaluate_task\u51fd\u6570\u4e2d\u3002</p>"},{"location":"zh/AgentDevelopmentGuide/SANDBOX_GUIDE/#task_2","title":"Task\u6846\u67b6\u5f00\u53d1","text":"<ul> <li> <p>\u9009\u5b9a\u5f85\u8bc4\u6d4b\u7684\u4eba\u5de5\u5199\u7684Agent\uff0c\u53ef\u9009\u7528scripts\u6587\u4ef6\u5939\u4e0b\u5df2\u5f00\u53d1\u597d\u7684Agent\uff0c\u4e5f\u53ef\u81ea\u884c\u7f16\u5199Agent\uff0c\u5177\u4f53\u6d41\u7a0b\u53ef\u53c2\u8003<code>ChainStream Agent\u5f00\u53d1\u6307\u5357</code>\u3002</p> </li> <li> <p>\u9009\u62e9\u5f85\u8bc4\u6d4b\u7684Task\uff0c\u53ef\u53c2\u8003tasks\u6587\u4ef6\u5939\u4e0b\u5404\u7c7btasks\uff0c\u6216\u8005\u81ea\u884c\u65b0\u5efa\u4e00\u4e2aTask\uff0c\u4f46\u9700\u7ee7\u627ftask_config_base.py\u7684TaskConfig\u7c7b\uff0c\u52a0\u5165\u7279\u5b9a\u7684task\u63cf\u8ff0\uff0c\u5b9a\u4e49\u597d\u8f93\u5165\u8f93\u51fa\u6d41\uff0c\u5e76\u8986\u5199\u4e09\u4e2a\u65b9\u6cd5\uff1a</p> </li> </ul> <pre><code>1. init_environment\uff1a\u521d\u59cb\u5316task\u73af\u5883\uff0c\u521b\u5efa\u6d4b\u8bd5\u7528\u7684agent\u548cstream\n2. start_task\uff1a \u542f\u52a8\u6e90\u5934stream\n3. evaluate_task\uff1a\u5bf9Agent\u5904\u7406\u540e\u7684output stream\u6570\u636e\u8fdb\u884c\u8bc4\u6d4b\uff0c\u8fd4\u56de\u8bc4\u6d4b\u7ed3\u679c\n</code></pre> <ul> <li>\u5c06\u5f85\u8bc4\u6d4b\u7684Agent\u548cTask\u7f6e\u4e8eSandbox\u4e2d\u8fd0\u884c</li> </ul> <p>Note</p> <p>\u53ef\u5c06\u60a8\u7684Task\u52a0\u5165\u5230tasks\u6587\u4ef6\u5939\u4e0b__init__.py\u6587\u4ef6,\u5b58\u50a8\u5728\u540d\u4e3a ALL_TASKS \u7684\u5b57\u5178\u4e2d\u8fdb\u884c\u96c6\u4e2d\u7ba1\u7406\uff0c\u65b9\u4fbf\u540e\u7eed\u8f7b\u677e\u8c03\u7528\u3002</p>"},{"location":"zh/AgentDevelopmentGuide/SANDBOX_GUIDE/#_2","title":"\u6c99\u76d2\u6846\u67b6\u5f00\u53d1","text":"<p>Note</p> <p>\u9700\u8981\u6709\u4e00\u4e2a\u8fd0\u884c\u7740\u7684Runtime\uff0c\u5e76\u4e14\u8be5Runtime\u6253\u5f00\u4e86\u8bc4\u6d4b\u6a21\u5f0f\uff0c\u53ef\u4ee5\u76d1\u63a7\u6d4b\u8bd5Agent\u7684\u52a8\u4f5c\uff0c\u76d1\u63a7\u7684\u52a8\u4f5c\u5305\u62ecChainstream Agent\u6a21\u5757\u7684\u5404\u79cdAPI\u3002</p>"},{"location":"zh/AgentDevelopmentGuide/SANDBOX_GUIDE/#1","title":"1. \u521d\u59cb\u5316","text":"<ul> <li>ChainStream \u521d\u59cb\u5316: \u8bbe\u7f6e\u6240\u4f7f\u7528\u7684Task\u548cAgent\u3002</li> <li>\u83b7\u53d6\u8fd0\u884c\u65f6\u73af\u5883: \u4f7f\u7528 <code>get_chainstream_core()</code> \u521d\u59cb\u5316Runtime\u3002</li> <li>Agent \u8bbe\u7f6e: \u6839\u636e\u6587\u4ef6\u683c\u5f0f\u8bfb\u53d6 Agent \u811a\u672c\u5185\u5bb9\u3002</li> </ul> <pre><code>def __init__(self, task, agent_file):\n    cs_server.init(server_type='core')\n    cs_server.start()\n    self.runtime = cs_server.get_chainstream_core()\n    self.task = task\n    if isinstance(agent_file, str) and agent_file.endswith('.py'):\n        with open(agent_file, 'r') as f:\n            agent_file = f.read()\n    self.agent_str = agent_file\n    self.result = {}\n</code></pre>"},{"location":"zh/AgentDevelopmentGuide/SANDBOX_GUIDE/#2-agent","title":"2. \u542f\u52a8\u6d4b\u8bd5 Agent","text":"<ul> <li>\u521d\u59cb\u5316\u4efb\u52a1\u73af\u5883: \u8c03\u7528 <code>init_environment</code> \u5728Runtime\u4e2d\u521d\u59cb\u5316Task\u73af\u5883\u3002</li> <li>\u542f\u52a8 Agent: \u8c03\u7528 <code>_start_agent</code> \u521b\u5efaAgent\u5b9e\u4f8b\u5e76\u542f\u52a8\uff0c\u914d\u7f6e\u5404\u52a8\u4f5c\u76d1\u542c\u3002</li> <li>\u5f00\u59cb\u4efb\u52a1\u6d41: \u8c03\u7528 <code>start_task</code> \u542f\u52a8Task\u6570\u636e\u6e90\u3002</li> <li>\u8bc4\u4f30\u4efb\u52a1: \u8c03\u7528 <code>evaluate_task</code> \u6570\u636e\u6e90\u7ed3\u675f\u540e\u6536\u96c6\u6d4b\u8bd5\u7ed3\u679c\uff0c\u5b58\u6863\u5e76\u8c03\u7528\u8bc4\u6d4b\u51fd\u6570\u3002</li> </ul> <pre><code>def start_test_agent(self):\n    self.task.init_environment(self.runtime)\n    self._start_agent()\n    self.task.start_task(self.runtime)\n    self.task.evaluate_task(self.runtime)\n</code></pre> <pre><code>def _start_agent(self):\n    namespace = {}\n    exec(self.agent_str, globals(), namespace)\n\n    class_object = None\n    globals().update(namespace)\n    for name, obj in namespace.items():\n        if isinstance(obj, type):\n            class_object = obj\n            break\n\n    if class_object is not None:\n        self.agent_instance = class_object()\n        self.agent_instance.start()\n</code></pre> <p>Tip</p> <p>\u5728\u5f00\u53d1\u9636\u6bb5\uff0c\u60a8\u53ef\u52a0\u5165\u591a\u4e2a\u81ea\u5b9a\u4e49\u5f02\u5e38\u7c7b\uff0c\u4f8b\u5982 <code>ExecError</code>, <code>StartError</code>, <code>RunningError</code> \u7b49\uff0c\u7528\u4e8e\u6355\u83b7\u548c\u5904\u7406\u4e0d\u540c\u9636\u6bb5\u53ef\u80fd\u51fa\u73b0\u7684\u5f02\u5e38\u60c5\u51b5\uff0c\u63d0\u9ad8\u6d4b\u8bd5\u6548\u7387\u3002</p>"},{"location":"zh/AgentDevelopmentGuide/SANDBOX_GUIDE/#3","title":"3. \u6d4b\u8bd5\u793a\u4f8b","text":"<p>Success</p> <p>\u4e0b\u9762\u4ee5\u4e00\u4e2a\u793a\u4f8b\u5c55\u793a\u5982\u4f55\u4f7f\u7528 <code>SandBox</code> \u7c7b\u8fdb\u884c\u5177\u4f53\u4efb\u52a1\u7684\u6d4b\u8bd5</p> <p>\u4e0b\u9762\u5c55\u793a\u4e86\u5982\u4f55\u4f7f\u7528 <code>SandBox</code> \u7c7b\u8fdb\u884c\u5177\u4f53\u4efb\u52a1\u7684\u6d4b\u8bd5\uff1a</p> <pre><code>if __name__ == \"__main__\":\n    from tasks import ALL_TASKS\n    ArxivTaskConfig = ALL_TASKS['ArxivTask']\n\n    agent_file = '''\n    import chainstream as cs\n    from chainstream.llm import get_model\n\n    class TestAgent(cs.agent.Agent):\n        def __init__(self):\n            super().__init__(\"test_arxiv_agent\")\n            self.input_stream = cs.get_stream(\"all_arxiv\")\n            self.output_stream = cs.get_stream(\"cs_arxiv\")\n            self.llm = get_model([\"text\"])\n\n        def start(self):\n            def process_paper(paper):\n                if \"abstract\" in paper:\n                    paper_title = paper[\"title\"]\n                    paper_content = paper[\"abstract\"]\n                    paper_versions = paper[\"versions\"]\n                    stage_tags = ['Conceptual', 'Development', 'Testing', 'Deployment', 'Maintenance','Other']\n                    prompt = \"Give you an abstract of a paper: {} and the version of this paper:{}. What tag would you like to add to this paper? Choose from the following: {}\".format(paper_content,paper_versions, ', '.join(stage_tags))\n                    prompt_message = [\n                        {\n                            \"role\": \"user\",\n                            \"content\": prompt\n                        }\n                    ]\n                    response = self.llm.query(prompt_message)\n                    print(paper_title+\" : \"+response)\n                    self.output_stream.add_item(paper_title+\" : \"+response)\n\n            self.input_stream.register_listener(self, process_paper)\n\n        def stop(self):\n            self.input_stream.unregister_listener(self)\n    '''\n\n    oj = SandBox(ArxivTaskConfig(), agent_file)\n    oj.start_test_agent()\n</code></pre> <p>\u5728\u8fd9\u4e2a\u793a\u4f8b\u4e2d\uff0c\u6211\u4eec\u5b9a\u4e49\u597d\u4e86\u7279\u5b9a\u7684Task\uff0c<code>agent_file</code> \u4e2d\u52a0\u5165\u4e86\u9700\u8981\u6267\u884c\u6b64Task\u7684Agent\uff0c\u4fbf\u53ef\u4ee5\u5c06 <code>TestAgent</code> \u5b9e\u4f8b\u5316\u5e76\u542f\u52a8\uff0c\u6d4b\u8bd5\u5176\u8868\u73b0\u3002</p>"},{"location":"zh/AgentGenerator/QUICK_START/","title":"QUICK START","text":""},{"location":"zh/ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/","title":"ChainStream \u7cfb\u7edf\u5f00\u53d1\u6982\u89c8","text":""},{"location":"zh/ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#_1","title":"\u7cfb\u7edf\u67b6\u6784","text":"<p>\u4e3b\u8981\u53c2\u8003 ChainStream \u7cfb\u7edf\u67b6\u6784\u8bbe\u8ba1\u3002</p>"},{"location":"zh/ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#_2","title":"\u4e3b\u8981\u6a21\u5757","text":"<ul> <li>ChainStream Runtime\uff1a\u8fd0\u884c\u65f6\u6a21\u5757\uff0c\u8d1f\u8d23\u6267\u884c ChainStream \u5e94\u7528\uff0c\u5305\u62ec\u5e94\u7528\u7684\u8c03\u5ea6\u3001\u8d44\u6e90\u7ba1\u7406\u3001\u6570\u636e\u6d41\u8f6c\u7b49\u3002</li> <li>ChainStream SDK\uff1aSDK \u6a21\u5757\uff0c\u63d0\u4f9b\u5f00\u53d1\u8005\u63a5\u53e3\uff0c\u5305\u62ec\u5e94\u7528\u5f00\u53d1\u3001\u6570\u636e\u6d41\u8f6c\u3001\u8d44\u6e90\u7ba1\u7406\u7b49\u3002</li> <li>ChainStream Agent Generator\uff1aAgent \u751f\u6210\u5668\u6a21\u5757\uff0c\u8d1f\u8d23\u6839\u636e\u5e94\u7528\u63cf\u8ff0\u6587\u4ef6\u751f\u6210 Agent \u4ee3\u7801\u3002</li> <li>ChainStream Dashboard\uff1a\u63a7\u5236\u9762\u677f\u6a21\u5757\uff0c\u63d0\u4f9b\u53ef\u89c6\u5316\u7684\u5e94\u7528\u7ba1\u7406\u3001\u76d1\u63a7\u3001\u62a5\u8b66\u7b49\u529f\u80fd\u3002</li> <li>ChainStream Agent Store\uff1aAgent \u4ed3\u5e93\u6a21\u5757\uff0c\u63d0\u4f9b Agent \u4ee3\u7801\u7684\u5b58\u50a8\u3001\u5206\u53d1\u3001\u66f4\u65b0\u7b49\u529f\u80fd\u3002</li> <li>ChainStream SandBox\uff1a\u6c99\u7bb1\u6a21\u5757\uff0c\u63d0\u4f9b\u5f00\u53d1\u8005\u5728\u7ebf\u8c03\u8bd5\u3001\u6d4b\u8bd5\u529f\u80fd\u3002</li> <li>ChainStream Doc\uff1a\u6587\u6863\u6a21\u5757\uff0c\u63d0\u4f9b ChainStream \u76f8\u5173\u6587\u6863\u7684\u7f16\u5199\u3001\u53d1\u5e03\u3001\u7ba1\u7406\u7b49\u529f\u80fd\u3002</li> <li>ChainStream Edge Sensor\uff1a\u8fb9\u7f18\u4f20\u611f\u5668\u6a21\u5757\uff0c\u63d0\u4f9b\u8fb9\u7f18\u8ba1\u7b97\u8bbe\u5907\u7684\u63a5\u5165\u3001\u7ba1\u7406\u3001\u6570\u636e\u91c7\u96c6\u7b49\u529f\u80fd\u3002</li> </ul>"},{"location":"zh/ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#_3","title":"\u53c2\u4e0e\u5f00\u53d1","text":""},{"location":"zh/ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#_4","title":"\u9879\u76ee\u4ea4\u6d41","text":"<p>\u76ee\u524d\u4e3b\u8981\u901a\u8fc7\u5f00\u6e90\u8f6f\u4ef6Zulip\u8fdb\u884c\u9879\u76ee\u7ba1\u7406\uff0c\u63a8\u8350\u6240\u6709\u5f00\u53d1\u8005\u52a0\u5165ChainStream Zulip\uff0c\u52a0\u5165\u8ba8\u8bba\u3002\u94fe\u63a5\u4e3a\uff1amobilellm.zulipchat.com</p> <p>\u901a\u8fc7Zulip\u53ef\u4ee5\u76f4\u63a5\u8054\u7cfb\u5230ChainStream\u4e3b\u8981\u6210\u5458\uff0c\u4e5f\u53ef\u4ee5\u901a\u8fc7\u90ae\u4ef6 jia.cheng.liu@qq.com \u8054\u7cfb\u5230\u6211\u4eec\u3002</p>"},{"location":"zh/ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#_5","title":"\u9879\u76ee\u7ba1\u7406","text":"<p>Zulip\u627f\u62c5\u4e00\u90e8\u5206\u9879\u76ee\u7ba1\u7406\u5de5\u4f5c\u3002</p> <p>Github Project\u548cIssue\u627f\u62c5\u4e00\u90e8\u5206\u9879\u76ee\u7ba1\u7406\uff0c\u53ef\u4ee5\u5173\u6ce8ChainStream-Team planning\u548cChainStream Issues\u3002</p>"},{"location":"zh/ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#_6","title":"\u5206\u652f\u7ba1\u7406","text":"<ul> <li>\u4e3b\u5206\u652f\uff1amain</li> <li>\u5f00\u53d1\u5206\u652f\uff1adev</li> <li>\u529f\u80fd\u5206\u652f\uff1afeature/xxx</li> <li>\u4fee\u590d\u5206\u652f\uff1afix/xxx</li> <li>\u6587\u6863\u5206\u652f\uff1adocs/xxx</li> <li>\u4e34\u65f6\u5206\u652f\uff1atemp/xxx</li> <li>\u6587\u6863\u9875\u9762\uff1agh-pages</li> </ul>"},{"location":"zh/ChainStreamDevelopmentGuide/CHAINSTREAM_SYS_DEVELOPMENT_OVERVIEW/#_7","title":"\u5f00\u53d1\u89c4\u8303","text":"<p>\u76ee\u524d\u6682\u65f6\u6ca1\u6709\u7279\u522b\u660e\u786e\u7684\u5f00\u53d1\u89c4\u8303\uff0c\u5305\u62ecissue\u3001PR\u3001commit message\u7b49\uff0c\u6b22\u8fce\u5927\u5bb6\u63d0\u51fa\u5efa\u8bae\u3002</p> <p>\u4e3b\u8981\u7684\u6ce8\u610f\u4e8b\u9879\u5c31\u662f:</p> <ol> <li>\u5efa\u8bae\u901a\u8fc7\u5404\u79cd\u6e20\u9053\u548c\u6211\u4eec\u6c9f\u901a\uff0c\u5305\u62ec\u90ae\u4ef6\u3001Zulip\u3001Github Issue\u7b49\uff0c\u8ba9\u6211\u4eec\u77e5\u9053\u4f60\u5bf9\u9879\u76ee\u7684\u60f3\u6cd5\u548c\u610f\u89c1\u3002</li> <li>\u4ee3\u7801\u98ce\u683c\u548c\u547d\u540d\u89c4\u8303\u3002</li> <li>\u63a8\u8350\u4f7f\u7528\u5355\u5143\u6d4b\u8bd5\u548c\u96c6\u6210\u6d4b\u8bd5\u3002</li> <li>\u5c3d\u91cf\u5728PR\u4e2d\u63cf\u8ff0\u6e05\u695a\u4f60\u7684\u4fee\u6539\u3002</li> </ol>"},{"location":"zh/ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/","title":"\u9879\u76ee\u6587\u6863\u5f00\u53d1\u6307\u5357","text":"<p>\u672c\u9879\u76ee\u4f7f\u7528 mkdocs \u4f5c\u4e3a\u6587\u6863\u6846\u67b6\uff0c\u4f7f\u7528 Material for MkDocs \u4e3b\u9898\u3002</p> <p>\u8be5\u6846\u67b6\u53ef\u4ee5\u76f4\u63a5\u5c06markdown\u6587\u4ef6\u7f16\u8bd1\u6210html\u6587\u4ef6\uff0c\u5e76\u90e8\u7f72\u5230github pages\u4e0a\u3002\u76ee\u524d\u5df2\u7ecf\u5b8c\u6210\u4e86\u5927\u90e8\u5206\u7f51\u9875\u914d\u7f6e\uff0c\u53ea\u9700\u8981\u7f16\u5199markdown\u6587\u4ef6\u5373\u53ef\u3002</p>"},{"location":"zh/ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/#_2","title":"\u672c\u5730\u5f00\u53d1\u73af\u5883\u642d\u5efa","text":"<pre><code>pip install mkdocs\npip install mkdocs-material\npip install mike\npip install mkdocs-rss-plugin\npip install mkdocs-minify-plugin\npip install mkdocs-static-i18n\n</code></pre>"},{"location":"zh/ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/#_3","title":"\u5f00\u53d1\u547d\u4ee4","text":"<pre><code># \u672c\u5730\u9884\u89c8\uff0c \u9700\u8981cd\u5230mkdocs\u76ee\u5f55\u4e0b\uff0c \u4f1a\u5728\u672c\u5730\u542f\u52a8\u4e00\u4e2a\u670d\u52a1\uff0c\u9ed8\u8ba4\u7aef\u53e3\u4e3a8000\nmkdocs serve\n\n# \u81ea\u52a8\u90e8\u7f72\uff0c \u9700\u8981cd\u5230mkdocs\u76ee\u5f55\u4e0b\uff0c \u4f1a\u81ea\u52a8\u5c06\u6700\u65b0\u6587\u6863\u90e8\u7f72\u5230github repo\u7684gh-pages\u5206\u652f\nmkdocs gh-deploy --force\n\n# \u4f7f\u7528mike\u90e8\u7f72\u5e26\u7248\u672c\u53f7\u7684\u6587\u6863\u5230github pages\nmike deploy --push --update-aliases x.x latest\n</code></pre>"},{"location":"zh/ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/#_4","title":"\u5f00\u53d1\u6d41\u7a0b","text":"<p>\u6ce8\u610f\u5206\u652f</p> <p>\u6587\u6863\u4e3b\u8981\u5728doc\u5206\u652f\u4e0a\u5f00\u53d1\uff0c\u6ce8\u610f\u4e0d\u8981\u5207\u9519\u5206\u652f</p> <ol> <li>\u5207\u6362\u5230doc\u5206\u652f</li> <li>cd\u5230ChainStream/mkdoc\u76ee\u5f55\u4e0b\uff0c\u8fd0\u884c<code>mkdocs serve</code>\u547d\u4ee4\uff0c\u542f\u52a8\u672c\u5730\u670d\u52a1</li> <li>\u5728ChainStream/mkdoc/docs\u76ee\u5f55\u4e0b\u7f16\u5199markdown\u6587\u4ef6\uff0c\u5e76\u4fdd\u5b58</li> <li>\u5982\u65b0\u589e\u5206\u652f\uff0c\u8fd8\u9700\u8981\u5728ChainStream/mkdoc/mkdocs.yml\u6587\u4ef6\u4e2d\u914d\u7f6enav\u914d\u7f6e</li> <li>\u4fdd\u5b58\u540e\uff0c\u6d4f\u89c8\u5668\u8bbf\u95eehttp://localhost:8000/\uff0c\u5373\u53ef\u770b\u5230\u6700\u65b0\u6587\u6863</li> <li>\u786e\u8ba4\u4e4b\u540e\u5728doc\u5206\u652f\u4e0a\u63d0\u4ea4\u4ee3\u7801\uff0c\u5e76push\u5230github</li> <li>\u4f7f\u7528mkdocs gh-deploy\u547d\u4ee4\u81ea\u52a8\u90e8\u7f72\u6700\u65b0\u6587\u6863\u5230github repo\u7684gh-pages\u5206\u652f</li> <li>\u7b49\u5f85\u51e0\u5206\u949f\uff0c\u5373\u53ef\u5728https://chainstream.github.io/ChainStream/ \u770b\u5230\u6700\u65b0\u6587\u6863</li> </ol>"},{"location":"zh/ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/#_5","title":"\u53cc\u8bed\u652f\u6301","text":"<p>\u672c\u9879\u76ee\u4f7f\u7528 mkdocs-static-i18n \u63d2\u4ef6\u5b9e\u73b0\u4e86\u53cc\u8bed\u652f\u6301\u3002</p> <p>\u5177\u4f53\u6765\u8bf4\uff0c\u672c\u9879\u76ee\u914d\u7f6e\u4e86en\u548czh\u4e24\u79cd\u8bed\u8a00\uff0c\u9ed8\u8ba4\u652f\u6301zh\u8bed\u8a00\u3002\u5728mkdocs.yml\u6587\u4ef6\u4e2d\u7684nav\u914d\u7f6e\u4e2d\u9ed8\u8ba4\u4f7f\u7528en\u914d\u7f6e\u3002\u82e5\u60f3\u652f\u6301zh\u8bed\u8a00\uff0c\u5219\u9700\u8981\u6784\u9020\u540c\u540d\u4f46\u4ee5.zh.md\u7ed3\u5c3e\u7684markdown\u6587\u4ef6\u3002</p> <p>\u540c\u65f6\uff0c\u5728mkdocs.yml\u6587\u4ef6\u4e2d\u914d\u7f6enav_translations:\u9009\u9879\u4ee5\u5b9e\u73b0\u4e0d\u540c\u8bed\u8a00\u7684\u5bfc\u822a\u680f\u7ffb\u8bd1\u3002</p>"},{"location":"zh/ChainStreamDevelopmentGuide/MKDOCS_DEVELOPMENT_GUIDE/#reference","title":"Reference","text":"<p>\u53c2\u8003\u6587\u6863</p> <p>\u867d\u7136\u4e0b\u9762\u6587\u6863\u8f83\u957f\uff0c\u4f46\u8d85\u8fc790%\u7684\u95ee\u9898\u90fd\u53ef\u4ee5\u4ece\u4e0b\u9762\u7684\u94fe\u63a5\u4e2d\u627e\u5230\u7b54\u6848\u3002</p> <ul> <li>https://www.mkdocs.org/</li> <li>https://squidfunk.github.io/mkdocs-material/</li> <li>https://github.com/jimporter/mike</li> <li>https://www.5axxw.com/wiki/content/6mmwzj</li> <li>http://www.cuishuaiwen.com:8000/zh/PROJECT/TECH-BLOG/mkdocs_and_material/#material_3</li> </ul>"},{"location":"zh/Demo/GLASSES_CAMERA/","title":"\u667a\u80fd\u773c\u955c\u6444\u50cf\u5934Agent","text":"<p>\u6211\u4eec\u63a2\u7d22\u4e86ChainStream\u5728\u667a\u80fd\u773c\u955c\u4e2d\u7684\u5e94\u7528\u3002\u6211\u4eec\u5c1d\u8bd5\u7ed9\u667a\u80fd\u773c\u955c\u5feb\u901f\u90e8\u7f72\u4e00\u4e2a\u57fa\u4e8eChainStream\u5f00\u53d1\u7684\u7b80\u5355\u89c6\u89c9\u611f\u77e5Agent\u3002</p> <p>\u5177\u4f53\u7684\uff0c\u6211\u4eec\u5e0c\u671b\u8ba9Glass\u65f6\u523b\u68c0\u67e5\u51fa\u73b0\u5728\u89c6\u91ce\u8303\u56f4\u5185\u7684\u73a9\u5177\u662f\u4e0d\u662f\u6211\u7684\u73a9\u5177\u3002\u5f53\u7136\u73a9\u5177\u5728\u8fd9\u91cc\u6307\u7684\u662f\u4efb\u4f55\u53ef\u4ee5\u88ab\u8bc6\u522b\u7684\u7269\u4f53\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u53ef\u4ee5\u66ff\u6362\u4e3a\u5176\u4ed6\u7269\u4f53\u3001\u4eba\u8138\u7b49\u3002</p>"},{"location":"zh/Demo/GLASSES_CAMERA/#agent_1","title":"\u8bbe\u8ba1Agent","text":"<p>\u6211\u4eec\u4e3a\u8be5\u4efb\u52a1\u8bbe\u8ba1\u4e86\u4e24\u6b65\uff1a\u68c0\u6d4b\u5f53\u524d\u89c6\u91ce\u4e2d\u662f\u5426\u5b58\u5728\u73a9\u5177\uff0c\u4ee5\u53ca\u8bc6\u522b\u51fa\u5177\u4f53\u7684\u73a9\u5177\u3002\u7136\u540e\u6211\u4eec\u57fa\u4e8eChainStream\u5f88\u65b9\u4fbf\u5730\u7f16\u5199\u4e86\u4e0b\u9762\u8fd9\u4e2aAgent\uff1a</p> <pre><code>import chainstream as cs\n\n\nclass ToyRecognitionAgent(cs.agent.Agent):\n    is_agent = True\n\n    def __init__(self, agent_id='toy_recognition_agent'):\n        super().__init__(agent_id)\n        self._source = cs.get_stream('socket_front_camera_video')\n        self.know_toy = cs.memory.fetch('known_toy').select_keys(['name', 'img'])\n        self._llm = cs.llm.get_model('gpt-4-vision')\n        self.video_buffer = cs.context.VideoBuffer(duration=10)\n\n        self.has_toy = cs.create_stream('has_toy')\n\n    def start(self):\n        def handle_new_frame(frame):\n            self.video_buffer.save(frame['frame'])\n            prompt = \"Is there a toy in the frame? Simply answer Yes or No\"\n            img = self.video_buffer.snapshot()\n            img.show()\n            response = self._llm.query(prompt, img).lower().strip()\n            print(response)\n            if response.startswith('yes'):\n                self.has_toy.send_item({'video_frame': img})\n\n        def recognize_toy(has_toy):\n            now_toy_frame = has_toy['video_frame']\n            imgs = [now_toy_frame]\n            names = \"\"\n            for toy in self.know_toy:\n                imgs.append(toy['img'])\n                if len(imgs) == 2:\n                    names += f\"'{toy['name']}'\"\n                elif len(imgs) == len(self.know_toy) + 1:\n                    names += f\" ,and '{toy['name']}'\"\n                else:\n                    names += f\", '{toy['name']}'\"\n\n            prompt = (f\"\u8bf7\u95ee\u7b2c\u4e00\u5f20\u56fe\u7247\u4e2d\u662f\u5426\u5b58\u5728\u5176\u4ed6\u56fe\u7247\u4e2d\u5217\u51fa\u7684\u73a9\u5177\uff1f\u5982\u679c\u6709\u8bf7\u5148\u56de\u7b54yes\uff0c\u7136\u540e\u5206\u522b\u8bf4\u51fa\u6211\u7ed9\u4ed6\u4eec\u53d6\u7684\u540d\u5b57\u3002\u4ece\u7b2c\u4e8c\u5f20\u5f00\u59cb\u5230\u6700\u540e\u7684\u6240\u6709\u56fe\u7247\u662f\u6211\u6240\u5c55\u793a\u7684\u6240\u6709\u73a9\u5177\uff0c\u6211\u4f9d\u6b21\u7ed9\u4ed6\u4eec\u53d6\u540d\u4e3a {names}\"\n                      f\"\u3002\u8bf7\u6ce8\u610f\u6211\u53ea\u5e0c\u671b\u4f60\u6839\u636e\u9664\u7b2c\u4e00\u5f20\u5916\u7684\u56fe\u7247\u6765\u63a8\u6d4b\u7b2c\u4e00\u5f20\u56fe\u7247\u4e2d\u5b58\u5728\u7684\u73a9\u5177\uff0c\u5bf9\u4e8e\u4e0d\u5728\u5c55\u793a\u4e2d\u7684\u73a9\u5177\uff0c\u5373\u4f7f\u4f60\u8ba4\u8bc6\u8be5\u73a9\u5177\u4f60\u4e5f\u4e0d\u53ef\u4ee5\u56de\u7b54yes\"\n                      f\"\u3002\u5e76\u4e14\u4f60\u6240\u56de\u7b54\u7684\u540d\u5b57\u4e5f\u5fc5\u987b\u5bf9\u5e94\u6211\u53d6\u7684\u540d\u5b57\uff0c\u5373\u4f7f\u8fd9\u4e9b\u540d\u5b57\u53ef\u80fd\u5f88\u5947\u602a\u751a\u81f3\u548c\u901a\u5e38\u8ba4\u77e5\u4e0d\u5bf9\u5e94\u3002\")\n\n            response = self._llm.query(prompt, imgs)\n            print(response)\n\n        self._source.register_listener(self, handle_new_frame)\n        self.has_toy.register_listener(self, recognize_toy)\n\n        return True\n\n    def pause(self):\n        self._source.unregister_listener(self)\n\n    def stop(self):\n        self._source.remove_listener(self)\n</code></pre>"},{"location":"zh/Demo/GLASSES_CAMERA/#memory","title":"\u52a0\u5165Memory","text":"<p>\u968f\u540e\uff0c\u6211\u4eec\u5728\u8be5Agent\u7684\u8bb0\u5fc6\u4e2d\u653e\u5165\u4e86\u4e0b\u9762\u4e09\u4e2a\u73a9\u5177\u7684\u56fe\u7247\u548c\u540d\u79f0\uff1a</p> <p></p>"},{"location":"zh/Demo/GLASSES_CAMERA/#edge-sensor","title":"\u914d\u7f6eEdge Sensor","text":"<p>\u6211\u4eec\u4f7f\u7528\u4e86\u96f7\u9e1fX2\u667a\u80fd\u773c\u955c\uff0c\u5e76\u5c06ChainStream Client App\u5b89\u88c5\u5230\u4e86\u667a\u80fd\u773c\u955c\u4e0a\u3002\u5f53App\u542f\u52a8\u65f6\u5c31\u53ef\u4ee5\u5c06\u8be5\u8bbe\u5907\u63a5\u5165\u5230ChainStream\u4e2d\u3002</p>"},{"location":"zh/Demo/GLASSES_CAMERA/#agent_2","title":"\u8fd0\u884cAgent","text":"<p>\u6211\u4eec\u5e26\u4e0a\u4e86\u667a\u80fd\u773c\u955c\uff0c\u5e76\u542f\u52a8\u4e86\u4e0a\u9762\u7f16\u5199\u7684Agent\uff0c\u5f97\u5230\u4e86\u4e0b\u9762\u7684\u7ed3\u679c\uff1a</p> <p></p> <p>\u53ef\u4ee5\u770b\u5230Agent\u80fd\u591f\u8f83\u4e3a\u6b63\u786e\u7684\u6267\u884c\u6211\u4eec\u7684\u4efb\u52a1\uff0c\u867d\u7136\u6b63\u786e\u6027\u4e0a\u4e0d\u591f\u597d\uff0c\u4f46\u672cDemo\u7684\u4e3b\u8981\u76ee\u7684\u662f\u5c55\u793aChainStream\u7684\u4fbf\u6377\u6027\u548c\u7075\u6d3b\u6027\uff0c\u76ee\u6807\u68c0\u6d4b\u4e5f\u5e76\u975eGPT-4\u6a21\u578b\u6240\u64c5\u957f\u7684\u3002</p> <p>\u6b63\u786e\u6027\u53d6\u51b3\u4e8eAgent\u7684\u7f16\u5199\u65b9\u5f0f\uff0c\u5982\u679c\u60f3\u63d0\u5347\u672c\u4efb\u52a1\u7684\u5b8c\u6210\u6548\u679c\uff0c\u53ef\u4ee5\u5728Agent\u4e2d\u4f7f\u7528\u4e13\u6709\u7684\u68c0\u6d4b\u6a21\u578b\uff0c\u6bd4\u5982YOLO\u3002</p>"},{"location":"zh/DesignBlog/LLMRuntimeOptimize/","title":"\u8fd0\u884c\u65f6\u4f18\u5316-LLM","text":"<p>\u7b14\u8bb0\u4ecb\u7ecd</p> <p>\u672c\u7bc7\u7b14\u8bb0\u8bb0\u5f55\u4e86\u8bbe\u8ba1\u548c\u4fee\u6539ChainStream LLM\u7684\u8fc7\u7a0b\u548c\u4e3b\u8981\u601d\u8def\u3002\u76ee\u524d\u5c1a\u672a\u5b8c\u6210\uff0c\u4e3b\u8981\u5728RuntimeOptimize\u5206\u652f\uff0c\u5173\u8054\u5230Issue#86 RuntimeOptimize-\u5df2\u6709\u6a21\u578b\u9009\u62e9\u548c\u5fae\u8c03\u65b0\u6a21\u578b\u3002</p>"},{"location":"zh/DesignBlog/LLMRuntimeOptimize/#_1","title":"\u76ee\u6807","text":"<p>ChainStream\u672a\u6765\u5c06\u4f1a\u8fd0\u884c\u4e00\u4e2a\u4f53\u79ef\u5e9e\u5927\u7684Stream flow graph\uff0c\u5176\u5355\u4f4d\u65f6\u95f4\u5185\u7684\u8ba1\u7b97\u91cf\u548c\u957f\u671f\u5f00\u673a\u7684\u7d2f\u79ef\u8ba1\u7b97\u91cf\u90fd\u662f\u5de8\u5927\u7684\uff0c\u4f1a\u5e26\u6765\u5927\u91cf\u7684token fee\u5f00\u9500\u3002\u76ee\u524d\u5df2\u6709\u5927\u91cf\u4e0d\u540c\u7c7b\u578b\u6027\u80fd\u7684LLM\uff0c\u4f46\u5bf9\u4e8e\u7528\u6237\u5f00\u53d1\u8005\u6765\u8bb2\uff0c\u9009\u7528\u7684LLM\u53ea\u9700\u8981\u6ee1\u8db3\u5176\u9700\u6c42\u5373\u53ef\uff0c\u4f46\u5f80\u5f80\u5904\u4e8e\u6027\u80fd\u6700\u5927\u5316\u7684\u8003\u8651\u9009\u62e9\u6700\u5f3a\u6700\u8d35\u7684\u6a21\u578b\uff0c\u4ece\u800c\u5e26\u6765\u80fd\u591a\u989d\u5916\u5f00\u9500\u3002</p> <p>ChainStream\u5e0c\u671b\u4ece\u7cfb\u7edf\u89d2\u5ea6\u5b8c\u6210token fee\u6700\u4f18\u5316\u7684\u95ee\u9898\u3002\u4e3b\u8981\u5305\u62ec\u4e24\u4e2a\u90e8\u5206\uff0c\u5b9a\u5236\u6a21\u578b\u548c\u6a21\u578b\u9009\u62e9\uff1a</p> <ul> <li>\u5b9a\u5236\u6a21\u578b\uff1a\u9488\u5bf9\u67d0\u786e\u5b9atask\uff0c\u5728\u4e00\u6bb5\u6570\u636e\u79ef\u7d2f\u540e\u5c1d\u8bd5\u5fae\u8c03\u4e00\u4e2a\u5b9a\u5236LLM\u3002</li> <li>\u6a21\u578b\u9009\u62e9\uff1a\u4e91\u7aef\u6700\u5f3a\u6a21\u578b\u3001\u4e91\u7aef\u666e\u901a\u6a21\u578b\u3001\u672c\u5730\u6a21\u578b\u3001\u5b9a\u5236\u6a21\u578b\u56db\u9009\u4e00\uff0c\u5728\u5f00\u9500\u548c\u6548\u679c\u4e2d\u627etrade off\u3002</li> </ul> <p>\u6b64\u5904\u4e3b\u8981\u8ba8\u8bba\u6a21\u578b\u9009\u62e9\u7684\u8bbe\u8ba1\u3002</p> <p>\u6a21\u578b\u9009\u62e9\u60f3\u8981\u5b9e\u73b0\u7684\u6548\u679c\u4e3b\u8981\u5305\u62ec\uff1a</p> <ul> <li>LLM Api\u4ec5\u6307\u5b9a\u6a21\u578b\u7c7b\u578b\uff0c\u5982\u7eaf\u6587\u672c\u6a21\u578b\u3001\u89c6\u89c9\u6a21\u578b\u3001\u8bed\u97f3\u6a21\u578b\u7b49\u3002</li> <li>ChainStream Runtime\u4f4e\u5c42\u652f\u6301\u5404\u578b\u53f7\u63a5\u53e3\u7c7bLLM\uff0c\u5305\u62ec\u5e38\u89c1\u4e91\u7aef\u548c\u672c\u5730LLM\u3002</li> <li>\u5bf9\u4e8e\u4e0d\u540c\u7c7b\u578b\u7684\u6a21\u578b\uff0c\u5728\u65f6\u95f4\u4e0a\u76d1\u63a7\u5176\u8fd0\u884c\u8868\u73b0\uff0c\u5e76\u6839\u636e\u8868\u73b0\u9009\u62e9\u6700\u4f18\u6a21\u578b\u3002</li> <li>\u5bf9\u4e8e\u4e0d\u540c\u578b\u53f7\u7684\u6a21\u578b\uff0c\u5728\u5f53\u524d\u65f6\u95f4\u4e0a\u5bf9\u5176\u6240\u6709\u8bf7\u6c42\u8fdb\u884c\u8c03\u5ea6\u3002</li> </ul>"},{"location":"zh/DesignBlog/LLMRuntimeOptimize/#_2","title":"\u6a21\u578b\u9009\u62e9","text":"<p>ChainStream\u81ea\u52a8\u68c0\u6d4b\u6bcf\u4e2atask\u4e2d\u6240\u4f7f\u7528\u7684LLM\u8868\u73b0\uff0c\u81ea\u52a8\u4e3a\u5176\u9009\u62e9\u66f4\u5408\u9002\u7684\u5177\u4f53\u578b\u53f7\u3002\u800c\u7528\u6237\u4ec5\u9700\u6307\u5b9a\u9700\u8981\u7684LLM\u7c7b\u578b\u5373\u53ef\u3002</p> <p></p> <p>\u5177\u4f53\u7684\u8bbe\u8ba1\u5305\u62ec\u4ee5\u4e0b\u51e0\u4e2a\u90e8\u5206\uff1a</p> <ul> <li>API\uff1a\u786e\u5b9a\u8981\u652f\u6301\u51e0\u79cdLLM\u7c7b\u578b\u3002</li> <li>LLM SDK\uff1a<ul> <li>get model\u6839\u636eLLM\u7c7b\u578b\u8fd4\u56deLLM\u63a5\u53e3\u7c7b\u3002 </li> <li>LLM\u63a5\u53e3\u7c7b\u4e2d\u4e0d\u6267\u884c\u5b9e\u9645query </li> <li>\u4e3a\u6bcf\u4e2aLLM\u63a5\u53e3\u7c7b\u9644\u52a0recorder</li> </ul> </li> <li>Runtime\uff1a<ul> <li>llm manager\u7ba1\u7406\u6bcf\u4e2allm\u63a5\u53e3\u7c7b\u793a\u4f8b</li> <li>\u4e3a\u6bcf\u4e2allm\u63a5\u53e3\u7c7b\u9644\u52a0\u4e00\u4e2arouter\uff0c\u6839\u636e\u8282\u70b9\u672c\u8eab\u548c\u4e0b\u6e38\u8282\u70b9\u7684\u8868\u73b0\u60c5\u51b5\u9009\u62e9\u8be5llm\u7684\u7c7b\u578b\u3002</li> </ul> </li> <li>Abstraction Layer\uff1a<ul> <li>\u652f\u6301\u5404\u578b\u53f7LLM\uff0c\u4e3a\u6bcf\u4e2aLLM\u5c01\u88c5\u578b\u53f7\u5b9e\u4f8b\u7c7b</li> <li>\u7ed9\u6bcf\u4e2aLLM\u5b9e\u4f8b\u7c7b\u9644\u52a0recorder\uff0c\u8bb0\u5f55\u8fd0\u884c\u65f6\u6027\u80fd\u6570\u636e</li> <li>\u7ed9\u6bcf\u4e2aLLM\u5b9e\u4f8b\u7c7b\u9644\u52a0query\u961f\u5217\uff0c\u6839\u636e\u6765\u6e90agent\u4f18\u5148\u7ea7\u548c\u6d41\u91cf\u60c5\u51b5\u8fdb\u884c\u8c03\u5ea6</li> </ul> </li> <li>\u8bc4\u6d4b\uff1a<ul> <li>\u4f7f\u7528ChainStream benchmark\uff0c\u9488\u5bf9\u672c\u6587\u65b9\u6cd5\u505a\u7cbe\u5ea6\u548c\u5f00\u9500\u7684\u8bc4\u4f30\u3002\u4ee5\u6700\u5f3a\u6a21\u578b\u505a\u7cbe\u5ea6\u4e0a\u9650\uff0c\u4ee5\u6700\u4fbf\u5b9c\u6a21\u578b\u505a\u5f00\u9500\u4e0b\u9650\u3002</li> </ul> </li> </ul>"},{"location":"zh/DesignBlog/LLMRuntimeOptimize/#_3","title":"\u7c7b\u8bbe\u8ba1","text":"<ul> <li>API\u5c42\uff1a<ul> <li>get_model(model_type)\uff1a \u6839\u636e\u6a21\u578b\u7c7b\u522b\u83b7\u5f97LLMInterface\u7c7b\u3002</li> </ul> </li> <li>LLM SDK\u5c42\uff1a<ul> <li>LLMInterface\u7c7b\uff1a\u6839\u636e\u5177\u4f53\u7c7b\u522b\uff0c\u901a\u8fc7LLMRouter\u5bf9\u63a5\u540e\u7aefLLM\u5b9e\u4f8b\u3002</li> <li>LLMInterfaceRecorder\u7c7b\uff1a\u8bb0\u5f55LLM\u63a5\u53e3\u7c7b\u8fd0\u884c\u60c5\u51b5\u3002</li> </ul> </li> <li>Runtime\u5c42\uff1a<ul> <li>LLMManager\u7c7b\uff1a\u7ba1\u7406LLMInstance\u5b9e\u4f8b\uff0c\u5b8c\u6210LLMInterface\u548cLLMInstance\u901a\u8fc7LLMRouter\u7684\u5bf9\u63a5\u3002</li> <li>LLMRouter\u7c7b\uff1a\u6839\u636e\u8282\u70b9\u6027\u80fd\u548c\u6d41\u91cf\u60c5\u51b5\uff0c\u4e3aLLMInterface\u9009\u62e9\u5408\u9002\u7684LLMInstance\u5b9e\u4f8b\u3002</li> <li>LLMInstance\u7c7b\uff1a\u5c01\u88c5\u5177\u4f53\u578b\u53f7\u7684LLM\u5b9e\u4f8b\uff0c\u9644\u52a0LLMRecorder\u548cquery\u961f\u5217\u3002</li> </ul> </li> <li>Config\uff1a<ul> <li>\u5b9a\u4e49\u5404\u578b\u53f7LLM\u7684\u914d\u7f6e\u53c2\u6570</li> <li>LLMRouter\u7684\u5f62\u5f0f</li> </ul> </li> </ul>"},{"location":"zh/SystemOverview/CHAINSTREAM_FRAMEWORK_OVERVIEW/","title":"ChainStream\u6846\u67b6\u67b6\u6784","text":"<p>\u4e0a\u56fe\u5c55\u793a\u4e86\u72ed\u4e49\u4e0a\u7684ChainStream\u6846\u67b6\u67b6\u6784\u3002ChainStream\u6846\u67b6\u4e3b\u8981\u5305\u542b\u4ee5\u4e0b\u51e0\u5c42\uff1a</p> <ol> <li>Agent\u5c42\uff1a\u5305\u62ec\u7528\u6237Agent\u548c\u7cfb\u7edfAgent\uff0c\u7c7b\u4f3c\u4e8eAndroid\u7cfb\u7edf\u4e2d\u7684\u7528\u6237App\u548c\u7cfb\u7edfApp\u3002\u7528\u6237Agent\u662f\u7528\u6237\u53ef\u4ee5\u81ea\u7531\u9009\u88c5\u548c\u5378\u8f7d\u7684\uff0c\u6267\u884c\u5177\u4f53\u7684\u7528\u6237\u9700\u6c42\uff0c\u7cfb\u7edfAgent\u5219\u662f\u7cfb\u7edf\u8fd0\u884c\u6240\u5fc5\u987b\u7684\u7ec4\u4ef6\uff0c\u8d1f\u8d23\u7cfb\u7edf\u7684\u6838\u5fc3\u529f\u80fd\u3002</li> <li>Libraries\u5c42\uff1a\u63d0\u4f9bChainStream\u7684\u6838\u5fc3\u62bd\u8c61\uff0c\u4e3b\u8981\u5305\u62ecStream\u3001Agent\u3001Models\u3001Memory\u548cPrompt\u7b49\u90e8\u5206\u3002</li> <li>Runtime\u5c42\uff1a\u8d1f\u8d23\u7ef4\u62a4\u5168\u5c40\u6d41\u8ba1\u7b97\u56fe\u3001\u6267\u884c\u4f18\u5316\u548c\u8c03\u5ea6\u3001\u7ba1\u7406\u548c\u5206\u914d\u8d44\u6e90\u7b49\u3002</li> <li>Abstraction\u5c42\uff1a\u63d0\u4f9b\u5bf9\u8d44\u6e90\u7684\u7edf\u4e00\u865a\u62df\u5316\uff0c\u4e3b\u8981\u5305\u62ec\u8ba1\u7b97\u6a21\u578b\u8d44\u6e90\u3001\u63a5\u53e3\u8d44\u6e90\u3001\u6570\u636e\u6e90\u8d44\u6e90\u7b49\u3002</li> <li>Infrastructure\u5c42\uff1a\u7ba1\u7406\u5e95\u5c42\u7684\u786c\u4ef6\u8d44\u6e90\uff0c\u5305\u62ecCPU\u3001GPU\u3001\u7f51\u7edc\u3001\u5b58\u50a8\u7b49\u3002</li> </ol>"},{"location":"zh/SystemOverview/CODE_STRUCTURE/","title":"\u4ee3\u7801\u7ed3\u6784","text":"<p>\u76ee\u524dChainStream\u4ed3\u5e93\u7684\u76ee\u5f55\u7ed3\u6784\u5982\u4e0b\uff1a</p> <pre><code>ChainStream\n\u251c\u2500AgentGenerator      # \u81ea\u7136\u8bed\u8a00\u751f\u6210ChainStream Agent\u7684\u5de5\u5177\n\u251c\u2500AgentStore    # Agent\u5546\u5e97\n\u251c\u2500chainstream        # \u6846\u67b6\u4ee3\u7801\n\u251c\u2500ChainStreamClient  # Edge Sensor App\n\u251c\u2500ChainStreamSandBox    # Agent\u6d4b\u8bd5\u6c99\u76d2\n\u251c\u2500ChainStreamTest    # \u5355\u5143\u6d4b\u8bd5\n\u2514\u2500mkdoc  # \u6587\u6863\n</code></pre>"},{"location":"zh/SystemOverview/SYSTEM_OVERVIEW/","title":"ChainStream \u7cfb\u7edf\u6982\u89c8","text":"<p>\u72ed\u4e49\u7684\u8bb2\uff0cChainStream\u4e3b\u8981\u662f\u4e00\u4e2aLLM Agent\u5f00\u53d1\u6846\u67b6\uff0c\u4ee5\u5176\u63d0\u4f9b\u7684Api\u548cRuntime\u4e3a\u4e3b\uff0c\u8fd9\u90e8\u5206\u5c06\u5728ChainStream\u6846\u67b6\u67b6\u6784\u4e2d\u8be6\u7ec6\u8ba8\u8bba\u3002\u5e7f\u4e49\u7684\u8bb2\uff0cChainStream\u8fd8\u5305\u542b\u4e0a\u56fe\u6240\u793a\u7684\u5404\u4e2a\u7ec4\u4ef6\uff0c\u4e3b\u8981\u5305\u62ec\uff1a</p> <ul> <li>Sensor Agents\uff1a\u611f\u77e5Agent\uff0c\u4f7f\u7528ChainStream SDK\u5f00\u53d1\uff0c\u5e76\u8fd0\u884c\u5728ChainStream Runtime\u4e2d\u3002</li> <li>ChainStream SDK\uff1a\u63d0\u4f9bSensor Agents\u5f00\u53d1\u6240\u9700\u7684Api\uff0c\u5305\u62ec\u6570\u636e\u91c7\u96c6\u3001\u6570\u636e\u5904\u7406\u3001\u6570\u636e\u4f20\u8f93\u7b49\u529f\u80fd\u3002</li> <li>ChainStream Runtime\uff1a\u8fd0\u884cSensor Agents\u3001\u7ef4\u62a4\u5168\u5c40\u6d41\u8ba1\u7b97\u56fe\u3001\u63a7\u5236\u5404\u4e2a\u8fb9\u7f18\u8bbe\u5907\u3001\u7ef4\u62a4\u5168\u5c40\u8d44\u6e90\u7b49\u529f\u80fd\u3002</li> <li>Edge Sensor\uff1a\u63d0\u4f9b\u9762\u5411Android\u3001Linux\u3001Window\u7b49\u7cfb\u7edf\u7684App\uff0c\u80fd\u591f\u5c06\u5bf9\u5e94\u8bbe\u5907\u4e0a\u7684\u6570\u636e\u6e90\u5bf9\u63a5\u5230ChainStream Runtime\u4e2d\u3002</li> <li>Dashboard\uff1aChainStream Runtime\u7684\u63a7\u5236\u9762\u677f\uff0c\u4e3b\u8981\u8fdb\u884c\u5bf9Runtime\u7684\u53ef\u89c6\u5316\u3001\u914d\u7f6e\u3001\u63a7\u5236\u3001\u5206\u6790\u7b49\u529f\u80fd\u3002</li> <li>Agent Generator\uff1aChainStream Agent\u751f\u6210\u5668\uff0c\u80fd\u591f\u76f4\u63a5\u5c06\u81ea\u7136\u8bed\u8a00\u63cf\u8ff0\u7684Agent\u8f6c\u6362\u4e3a\u4ee3\u7801\uff0c\u5e76\u8fd0\u884c\u5728ChainStream Runtime\u4e2d\u3002</li> <li>Sandbox\uff1aAgent\u7684\u4eff\u771f\u73af\u5883\uff0c\u80fd\u591f\u6a21\u62dfAgent\u8fd0\u884c\u7684\u73af\u5883\uff0c\u5e76\u63d0\u4f9bAgent\u5f00\u53d1\u3001\u8c03\u8bd5\u3001\u6d4b\u8bd5\u7b49\u529f\u80fd\u3002</li> <li>Agent Store\uff1aAgent\u7684\u4ed3\u5e93\uff0c\u63d0\u4f9bAgent\u7684\u5171\u4eab\u3001\u53d1\u5e03\u3001\u641c\u7d22\u7b49\u529f\u80fd\u3002</li> </ul>"},{"location":"zh/SystemOverview/SYSTEM_SCENARIOS/","title":"ChainStream \u5e94\u7528\u573a\u666f","text":""},{"location":"zh/SystemOverview/SYSTEM_SCENARIOS/#_1","title":"\u8fde\u7eed\u611f\u77e5","text":"<p>\u6211\u4eec\u7406\u60f3\u4e2d\u7684Agent\u611f\u77e5\u662f\u6253\u7834\u788e\u7247\u5316\u7684\uff0c\u5728\u65f6\u95f4\u4e0a\u8fde\u7eed\u3001\u5728\u6570\u636e\u8303\u56f4\u4e0a\u8fde\u7eed\u3001\u5728\u611f\u77e5\u8fc7\u7a0b\u548c\u7ed3\u679c\u4e0a\u8fde\u7eed\u3002</p> <ul> <li>\u65f6\u95f4\u4e0a\u8fde\u7eed\uff1aAgent\u7684\u611f\u77e5\u662f\u4e0d\u95f4\u65ad\u7684\uff0c\u65f6\u523b\u90fd\u5728\u611f\u77e5\u89c6\u91ce\u5185\u7684\u4e00\u5207\uff0c\u5e76\u5c06\u6240\u8ba4\u4e3a\u91cd\u8981\u7684\u5185\u5bb9\u8bb0\u5f55\u4e0b\u6765\u3002</li> <li>\u6570\u636e\u8303\u56f4\u4e0a\u8fde\u7eed\uff1aAgent\u7684\u611f\u77e5\u53ef\u4ee5\u8de8\u8d8a\u591a\u4e2a\u6570\u636e\u6e90\uff0cChainStream\u901a\u8fc7\u63d0\u4f9bEdge Sensor\u4ece\u800c\u6253\u901a\u4e0d\u540c\u8bbe\u5907\u3001\u4e0d\u540c\u4f20\u611f\u5668\u3001\u4e0d\u540c\u6570\u636e\u6e90\u7684\u8fb9\u754c\u3002</li> <li>\u611f\u77e5\u8fc7\u7a0b\u548c\u7ed3\u679c\u4e0a\u8fde\u7eed\uff1a\u4e0d\u540cAgent\u7684\u611f\u77e5\u6b65\u9aa4\u53ef\u4ee5\u4ea4\u53c9\uff0c\u7ed3\u679c\u53ef\u4ee5\u590d\u7528\uff0c\u6253\u7834Agent\u95f4\u7684\u754c\u9650\u3002</li> </ul>"},{"location":"zh/SystemOverview/SYSTEM_SCENARIOS/#chainstream_1","title":"ChainStream\u4ea7\u54c1\u5f62\u6001","text":"<p>ChainStream\u4ea7\u54c1\u5f62\u6001\u4e3b\u8981\u4e3a\u591a\u8fb9\u7f18\u611f\u77e5\u8bbe\u5907+\u672c\u5730\u670d\u52a1\u5668+\u4e91\u7aef\u670d\u52a1\u5668\u4e09\u7ea7\u67b6\u6784\uff1a</p> <ul> <li>\u591a\u8fb9\u7f18\u8bbe\u5907\uff1a\u5373Edge Sensor\uff0c\u76f8\u5f53\u4e8e\u6574\u4e2a\u7cfb\u7edf\u7684\u611f\u5b98\u548c\u89e6\u624b\uff0c\u8d1f\u8d23\u5411\u672c\u5730\u670d\u52a1\u5668\u4f20\u9012\u5404\u4f20\u611f\u5668\u6570\u636e\uff0c\u5e76\u4e14\u6839\u636e\u6307\u4ee4\u6267\u884c\u76f8\u5e94\u7684\u52a8\u4f5c\uff0c\u6bd4\u5982\u901a\u77e5\u3001\u64ad\u653e\u58f0\u97f3\u7b49\u3002</li> <li>\u672c\u5730\u670d\u52a1\u5668\uff1a\u662f\u6bcf\u4e2a\u7528\u6237\u90e8\u7f72\u5728\u672c\u5730\u7684\u53d7\u4fe1\u670d\u52a1\u5668\uff0c\u8d1f\u8d23\u8054\u901a\u548c\u63a7\u5236\u5404\u8fb9\u7f18\u8bbe\u5907\u3001\u6267\u884c\u4e3b\u8981\u7684ChainStream\u8ba1\u7b97\u5de5\u4f5c\u3001\u672c\u5730\u5927\u6a21\u578b\u3001\u9ad8\u9690\u79c1\u6570\u636e\u5b58\u50a8\u7b49\u4efb\u52a1\u3002</li> <li>\u4e91\u7aef\u670d\u52a1\u5668\uff1a\u662f\u7531ChainStream\u4e91\u670d\u52a1\u63d0\u4f9b\u5546\u63d0\u4f9b\u7684\u8865\u5145\u670d\u52a1\uff0c\u5305\u62ec\u66f4\u5f3a\u529b\u7684\u4e91\u7aef\u5927\u6a21\u578b\u3001\u4e91\u7aef\u5b58\u50a8\u3001Agent Store\u7b49\u670d\u52a1\u3002</li> </ul> <p>\u53ef\u4ee5\u770b\u51fa\uff0c\u51fa\u4e8e\u9690\u79c1\u548c\u5b89\u5168\u7684\u8003\u8651\uff0cChainStream\u7684\u672c\u5730\u8ba1\u7b97\u548c\u5b58\u50a8\u7684\u5360\u6bd4\u8f83\u5927\uff0c\u6545\u9700\u8981\u7528\u6237\u6839\u636e\u9700\u6c42\u914d\u7f6e\u8fb9\u7f18\u8bbe\u5907\u3001\u672c\u5730\u670d\u52a1\u5668\u3001\u53d7\u4fe1\u5c40\u57df\u7f51\u7b49\u90e8\u5206\u3002</p>"},{"location":"zh/SystemOverview/SYSTEM_SCENARIOS/#_2","title":"\u573a\u666f\u793a\u4f8b","text":"<p>ChainStream\u9762\u5411\u7684\u7528\u6237\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\uff1a</p> <ul> <li>\u4e2a\u4eba</li> <li>\u5bb6\u5ead</li> <li>\u4f01\u4e1a</li> <li>\u5546\u94fa\u3001\u529e\u516c\u5ba4\u3001\u5b66\u6821</li> </ul> <p>\u6bcf\u4e00\u5957ChainStream\u7cfb\u7edf\u88ab\u7528\u6237\u8303\u56f4\u5185\u7684\u6240\u6709\u7528\u6237\u3001\u7ec8\u7aef\u3001\u8bbe\u5907\u6240\u5171\u4eab\u3002</p> <p></p> <p>\u5728\u6211\u4eec\u7684\u8bbe\u60f3\u4e2d\uff0cChainStream\u53ef\u4ee5\u5e94\u7528\u4e8e\u4e0a\u56fe\u4e2d\u7684\u573a\u666f\uff1a</p> <ul> <li>\u4e2a\u4eba\u52a9\u7406\uff1a\u4e3b\u8981\u8fde\u63a5\u4e2a\u4eba\u624b\u673a\u3001\u7a7f\u6234\u8bbe\u5907\u3001\u667a\u80fd\u5bb6\u5177\u7b49\u8bbe\u5907\u3002\u611f\u77e5\u4e2a\u4eba\u7528\u6237\u7684\u65e5\u5e38\u751f\u6d3b\uff0c\u63d0\u4f9b\u4e2a\u6027\u5316\u7684\u670d\u52a1\u3002</li> <li>\u5bb6\u5ead\u52a9\u7406\uff1a\u4e3b\u8981\u8fde\u63a5\u5bb6\u5ead\u6210\u5458\u7684\u624b\u673a\u3001\u667a\u80fd\u5bb6\u5177\u7b49\u8bbe\u5907\u3002\u611f\u77e5\u5bb6\u5ead\u6210\u5458\u7684\u65e5\u5e38\u751f\u6d3b\uff0c\u63d0\u4f9b\u5bb6\u5ead\u670d\u52a1\u3002</li> <li>\u4f01\u4e1a\u52a9\u7406\uff1a\u4e3b\u8981\u8fde\u63a5\u4f01\u4e1a\u5458\u5de5\u7684\u624b\u673a\u3001\u529e\u516c\u8bbe\u5907\u7b49\u8bbe\u5907\u3002\u611f\u77e5\u4f01\u4e1a\u5458\u5de5\u7684\u65e5\u5e38\u5de5\u4f5c\uff0c\u63d0\u4f9b\u4f01\u4e1a\u670d\u52a1\u3002</li> <li>\u4e13\u4e1a\u573a\u666f\u52a9\u7406\uff1a\u6307\u5982\u53a8\u623f\u3001\u5de5\u4f5c\u95f4\u3001\u5b9e\u9a8c\u5ba4\u3001\u6d41\u6c34\u7ebf\u8f66\u95f4\u7b49\u4e13\u4e1a\u5316\u5f3a\u7684\u573a\u666f\u3002\u611f\u77e5\u4e13\u4e1a\u573a\u666f\u7684\u65e5\u5e38\u5de5\u4f5c\uff0c\u5145\u5f53\u65e5\u5fd7\u8bb0\u5f55\u3001\u89c4\u8303\u68c0\u67e5\u3001\u6d41\u7a0b\u6307\u5bfc\u7b49\u529f\u80fd\u3002</li> </ul>"},{"location":"zh/SystemOverview/WHAT_IS_CHAINSTREAM/","title":"ChainStream\u662f\u4ec0\u4e48\uff1f","text":"<p>ChainStream\u662f\u4e00\u4e2a\u81f4\u529b\u4e8e\u66f4\u597d\u652f\u6301Agent\u5b9e\u73b0\u957f\u65f6\u95f4\u611f\u77e5\u80fd\u529b\u7684Agent\u5f00\u53d1\u6846\u67b6\uff0c\u6846\u67b6\u91c7\u7528\u4e86\u4e8b\u4ef6\u9a71\u52a8\u7684\u591a\u5c42\u6d41\u5f0f\u7ed3\u6784\uff0c\u76ee\u7684\u662f\u4e3a\u4e86\u5b9e\u73b0Agent\u7684\u957f\u65f6\u95f4\u611f\u77e5\u80fd\u529b\u4ee5\u53ca\u4fe1\u606f\u5206\u4eab\u80fd\u529b\u3002</p>"},{"location":"zh/SystemOverview/WHAT_IS_CHAINSTREAM/#_1","title":"\u4ec0\u4e48\u662f\u6d41\uff1f\u4ec0\u4e48\u662f\u4e8b\u4ef6\u9a71\u52a8\uff1f","text":"<p>\u6d41\u5c31\u662f\u4e00\u4e2a\u6570\u636e\u7ba1\u9053\uff0c\u7c7b\u4f3c\u4e8e\u6c34\u7ba1\uff0c\u6709\u5165\u53e3\u548c\u51fa\u53e3\u3002Agent\u53ef\u4ee5\u5728\u4efb\u610f\u65f6\u523b\u628a\u4efb\u610f\u5185\u5bb9\u653e\u5165\u6d41\u4e2d\uff0c\u8fd9\u4e2a\u6570\u636e\u5c31\u4f1a\u968f\u7740\u7ba1\u9053\u81ea\u52a8\u6d41\u5411\u4e0b\u6e38\u7684Agent\u3002</p> <p>\u6d41\u548cAgent\u7684\u5173\u7cfb\u901a\u8fc7\u76d1\u542c\u6765\u5b9e\u73b0\uff0c\u8fd9\u5f88\u50cf\u5fae\u4fe1\u7684\u516c\u4f17\u53f7\u8ba2\u9605\uff0c\u6216\u8005youtube\u7684\u9891\u9053\u8ba2\u9605\uff1a</p> <ul> <li>\u5fae\u4fe1\u7528\u6237\u8ba2\u9605\u4e86\u67d0\u4e2a\u516c\u4f17\u53f7\uff0c\u5f53\u8be5\u516c\u4f17\u53f7\u6709\u65b0\u6587\u7ae0\u53d1\u5e03\u65f6\uff0c\u5fae\u4fe1\u4f1a\u81ea\u52a8\u63a8\u9001\u7ed9\u7528\u6237\u3002</li> <li>Youtube\u7528\u6237\u8ba2\u9605\u4e86\u67d0\u4e2a\u9891\u9053\uff0c\u5f53\u8be5\u9891\u9053\u6709\u65b0\u7684\u89c6\u9891\u53d1\u5e03\u65f6\uff0cYoutube\u4f1a\u81ea\u52a8\u63a8\u9001\u7ed9\u7528\u6237\u3002</li> <li>Agent\u8ba2\u9605\u4e86\u67d0\u4e2a\u6d41\uff0c\u5f53\u8be5\u6d41\u4e2d\u6709\u65b0\u7684\u6570\u636e\u65f6\uff0cChainStream\u4f1a\u81ea\u52a8\u628a\u6570\u636e\u63a8\u9001\u7ed9Agent\u3002</li> </ul> <p>\u8fd9\u79cd\u63d0\u524d\u76d1\u542c\u3001\u81ea\u52a8\u63a8\u9001\u7684\u673a\u5236\uff0c\u5c31\u662f\u4e8b\u4ef6\u9a71\u52a8\u7684\u6838\u5fc3\u3002\u4e8b\u4ef6\u9a71\u52a8\u7684\u4e3b\u8981\u4f18\u70b9\u5c31\u662f\u5728\u5927\u578b\u8ba1\u7b97\u56fe\u4e2d\u51cf\u5c11\u975e\u5fc5\u8981\u8ba1\u7b97\u3002</p>"},{"location":"zh/SystemOverview/WHAT_IS_CHAINSTREAM/#agentchainstream","title":"Agent\u5728ChainStream\u4e2d\u662f\u4ec0\u4e48\u6837\u5b50\u7684\uff1f","text":"<p>Agent\u4e2d\u7684\u51fd\u6570\u53ef\u4ee5\u88ab\u8ba2\u9605\u5230\u67d0\u4e2a\u6d41\u4e0a\uff0c\u4e5f\u53ef\u4ee5\u5f80\u67d0\u4e2a\u6d41\u4e2d\u5199\u5165\u6570\u636e\u3002Agent\u4f5c\u4e3a\u5177\u6709\u67d0\u79cd\u529f\u80fd\u7684\u903b\u8f91\u6982\u5ff5\u53ef\u4ee5\u5305\u62ec\u4e00\u4e2a\u6216\u591a\u4e2a\u51fd\u6570\u3002</p> <p>\u6211\u4eec\u53ef\u4ee5\u628aAgent Function\u770b\u4f5c\u6d41\u7684\u8f6c\u6362\u51fd\u6570\u3002\u6bd4\u5982\uff0c\u5bf9\u4e8e\u4e00\u4e2a\u76d1\u63a7\u6444\u50cf\u5934\u800c\u8a00\uff0c\u5176\u4f5c\u4e3a\u6e90\u5934\u53ef\u4ee5\u6e90\u6e90\u4e0d\u65ad\u7684\u89c6\u9891\u6d41\uff0c\u6d41\u4e2d\u7684\u5355\u4f4d\u662f\u89c6\u9891\u5e27\u3002\u5f53\u6211\u4eec\u6784\u9020\u4e86\u4e00\u4e2aPerson Detection Agent\uff0c\u5b83\u53ef\u4ee5\u8ba2\u9605\u5230\u8fd9\u4e2a\u89c6\u9891\u6d41\u3001\u5bf9\u5176\u8fdb\u884c\u76ee\u6807\u68c0\u6d4b\u5e76\u5c06\u6709\u4eba\u51fa\u73b0\u7684\u5e27\u63a8\u5230\u65b0\u7684\u6d41\u4e2d\u3002 \u6211\u4eec\u5c31\u83b7\u5f97\u4e86Person Stream\u3002\u8fdb\u4e00\u6b65\uff0c\u6211\u4eec\u53ef\u4ee5\u5728\u8be5\u6d41\u4e0a\u76d1\u542c\u4e00\u4e2aFace Recognition Agent\u6765\u4ea7\u751f\u4eba\u8138\u68c0\u6d4b\u7684Face Stream\u3002\u4ee5\u6b64\u7c7b\u63a8\uff0c\u6211\u4eec\u53ef\u4ee5\u6784\u9020\u51fa\u4e00\u4e2a\u590d\u6742\u7684Agent\u6d41\u56fe\u3002</p> <p>\u6839\u636e\u4e0a\u9762\u4f8b\u5b50\u53ef\u4ee5\u770b\u51fa\uff0cChainStream\u7684\u6838\u5fc3\u601d\u60f3\u5c31\u662f\u901a\u8fc7\u591a\u4e2a\u539f\u5b50\u5316\u7684\u8f6c\u6362\u6b65\u9aa4\u6765\u9010\u6b65\u5b9e\u73b0\u611f\u77e5\u4efb\u52a1\u3002\u5e76\u4e14\u6bcf\u4e2a\u4e2d\u95f4\u6b65\u9aa4\u6d41\u90fd\u53ef\u4ee5\u88ab\u5176\u4ed6Agent\u6240\u4f7f\u7528\uff0c\u6bd4\u5982Face Stream\u53ef\u4ee5\u88ab\u7528\u6765\u505a\u60c5\u611f\u8bc6\u522b\u3001\u8eab\u4efd\u8bc6\u522b\u3001\u53e3\u7f69\u8bc6\u522b\u7b49\u5b50\u4efb\u52a1\u3002\u8fd9\u4f7f\u5f97Agent\u4e4b\u95f4\u7684\u5171\u4eab\u66f4\u52a0\u65b9\u4fbf\u3002</p> <p>\u5bf9\u4e8eChainStream Runtime\u800c\u8a00\uff0c\u5176\u5de5\u4f5c\u5c31\u662f\u7ef4\u62a4\u7531\u6240\u6709Agent\u5408\u5e76\u5f97\u5230\u4e00\u4e2a\u5927\u7684Stream Flow Graph\u4e2d\uff0c\u5e76\u901a\u8fc7\u4e8b\u4ef6\u9a71\u52a8\u7684\u673a\u5236\u6765\u5b9e\u73b0\u6d41\u7684\u81ea\u52a8\u63a8\u9001\u3002\u5e76\u4e14\u5bf9\u8be5Graph\u8fdb\u884c\u5404\u79cd\u7cfb\u7edf\u4f18\u5316\u3002</p>"},{"location":"zh/SystemOverview/WHAT_IS_CHAINSTREAM/#chainstream-vs-agent","title":"ChainStream VS Agent\u5f00\u53d1\u6846\u67b6\uff1f","text":"<p>\u76ee\u524d\u5df2\u7ecf\u6709\u592a\u591aAgent\u6846\u67b6\u4e86\uff0c\u5176\u4e2d\u4e0d\u4e4f\u6709LangChain\u3001AutoGPT\u3001MetaGPT\u4e4b\u7c7b\u7684\u6210\u719f\u4e14\u5927\u578b\u7684\u6846\u67b6\u3002ChainStream\u548c\u4ed6\u4eec\u6709\u4ec0\u4e48\u533a\u522b\uff1f</p> <p>\u5176\u4e2d\u6700\u660e\u663e\u7684\u533a\u522b\u5c31\u662f\uff1aChainStream\u76ee\u524d\u8fd8\u592a\u5c0f\u4e86\uff0c\u4ece\u6846\u67b6\u4f53\u91cf\u4e0a\u548c\u6210\u719f\u5ea6\u4e0a\u6765\u8bb2ChainStream\u90fd\u8fd8\u5dee\u5f88\u591a\uff0c\u6211\u4eec\u8fd8\u6709\u5f88\u957f\u7684\u8def\u8981\u8d70\u3002</p> <p>\u5f53\u7136\uff0c\u6838\u5fc3\u7684\u533a\u522b\u5176\u5b9e\u5f88\u660e\u663e\uff1a</p> <ul> <li>\u9762\u5411\u4e0d\u540c\u7684Agent\u7c7b\u578b\uff1a\u5927\u591a\u6570\u5df2\u6709Agent\u6846\u67b6\u90fd\u662f\u7f16\u5199Problem-solving Agent\u7684\uff0c\u800cChainStream\u4e3b\u8981\u9762\u5411Context-aware Agent\uff0c\u8fd9\u7c7bAgent\u9700\u8981\u957f\u65f6\u95f4\u7684\u611f\u77e5\u80fd\u529b\u3002</li> <li>\u504f\u5411\u611f\u77e5\u7684\u4fa7\u91cd\u70b9\uff1aChainStream\u76ee\u524d\u4e13\u6ce8\u4e8e\u66f4\u597d\u7684\u89e3\u51b3\u957f\u65f6\u95f4\u611f\u77e5\u95ee\u9898\uff0c\u5c31\u6211\u4eec\u6240\u77e5\uff0cChainStream\u662f\u7b2c\u4e00\u4e2a\u4e13\u95e8\u4e3a\u611f\u77e5\u5f00\u53d1\u72ec\u7acb\u6a21\u5757\u7684\u6846\u67b6\u3002</li> <li>\u72ec\u7279\u7684\u7ed3\u6784\uff1a\u6240\u6709Agent\u90fd\u5e76\u5165\u4e00\u5f20\u5927\u7684\u4e8b\u4ef6\u9a71\u52a8\u6d41\u56fe\u4e2d\uff0c\u4fbf\u4e8eAgent\u4e4b\u95f4\u7684\u4fe1\u606f\u5171\u4eab\u548c\u7cfb\u7edf\u5168\u5c40\u4f18\u5316\u3002</li> <li>\u9762\u5411\u8fb9\u7f18\u573a\u666f\uff1a\u5927\u591a\u6570Agent\u6846\u67b6\u90fd\u9762\u5411\u4e91\u7aef\uff0c\u800cChainStream\u9762\u5411\u8fb9\u7f18\u573a\u666f\uff0c\u6211\u4eec\u5c1d\u8bd5\u6253\u901a\u4e0d\u540c\u8fb9\u7f18\u8bbe\u5907\u95f4\u7684\u4f20\u611f\u5668\u754c\u9650\u3002</li> </ul> <p>\u603b\u7684\u6765\u8bf4\uff0cChainStream\u4f5c\u4e3a\u4e00\u4e2a\u6982\u5ff5\u4e0a\u8f83\u65b0\u7684\u6846\u67b6\uff0c\u8fd8\u5904\u4e8e\u8d77\u6b65\u9636\u6bb5\u3002\u5728\u77ed\u671f\u4e0a\uff0c\u6211\u4eec\u5e0c\u671b\u5b83\u80fd\u591f\u805a\u7126\u4e8e\u66f4\u597d\u7684Agent\u7684\u957f\u65f6\u95f4\u611f\u77e5\u80fd\u529b\uff0c\u63d0\u4f9b\u4e00\u5957\u5c0f\u800c\u7cbe\u7684Agent\u611f\u77e5\u89e3\u51b3\u65b9\u6848\u3002 \u5728\u957f\u671f\u4e0a\uff0c\u6211\u4eec\u540c\u6837\u62b1\u6709ChainStream\u6210\u4e3a\u5927\u578bAgent\u5f00\u53d1\u6846\u67b6\u7684\u68a6\u60f3\uff0c\u53d1\u6398\u5176\u8fb9\u7f18\u5e94\u7528\u5f00\u53d1\u90e8\u7f72\u7684\u6f5c\u529b\uff0c\u5e0c\u671b\u80fd\u591f\u501f\u5f00\u6e90\u793e\u533a\u4e4b\u529b\u5b8c\u5584\u5176\u5404\u65b9\u9762\u80fd\u529b\u3002</p>"},{"location":"zh/UserGuide/DASHBOARD_GUIDE/","title":"\u63a7\u5236\u9762\u677f\u6307\u5357","text":"<p>\u6211\u4eec\u63d0\u4f9b\u4e86Web\u548cshell\u4e24\u79cd\u65b9\u5f0f\u6765\u548cChainStream Runtime\u8fdb\u884c\u4ea4\u4e92\uff0c\u6211\u4eec\u66f4\u63a8\u8350\u4f7f\u7528Web\u65b9\u5f0f\uff0c\u56e0\u4e3a\u5b83\u66f4\u52a0\u76f4\u89c2\u5e76\u4e14\u529f\u80fd\u66f4\u4e30\u5bcc\u3002</p> <p>\u5f53\u9ed8\u8ba4\u60c5\u51b5\u4e0b\u6267\u884c<code>python start.py</code>\u547d\u4ee4\u540e\uff0cChainStream Runtime\u4f1a\u81ea\u52a8\u6253\u5f00Web\u63a7\u5236\u9762\u677f\uff0c\u9ed8\u8ba4\u5730\u5740\u4e3a<code>http://localhost:6677</code>\u3002</p> <p>\u76ee\u524dWeb\u7aef\u7684\u63a7\u5236\u9762\u677f\u8fd8\u5904\u4e8e\u6d4b\u8bd5\u9636\u6bb5\uff0c\u529f\u80fd\u8fd8\u4e0d\u5b8c\u6574\uff0c\u6211\u4eec\u4e3a\u8ba1\u5212\u4e2d\u7684\u529f\u80fd\u9884\u7559\u4e86\u63a5\u53e3\uff0c\u540e\u7eed\u6211\u4eec\u4f1a\u9010\u6b65\u5b8c\u5584\u3002</p> <p>\u76ee\u524d\u5df2\u5b9e\u73b0\u7684\u529f\u80fd\u4e3b\u8981\u662fAgent\u7684\u7ba1\u7406\u3001Stream\u7684\u76d1\u63a7\u548cStream Flow Graph\u7684\u76d1\u63a7\u3002</p>"},{"location":"zh/UserGuide/DASHBOARD_GUIDE/#agent","title":"\u7ba1\u7406Agent","text":"<p>\u5de6\u4fa7\u5217\u8868\u4e2d\u4f1a\u81ea\u52a8\u626b\u63cf\u5e76\u52a0\u8f7d\u6307\u5b9a\u8def\u5f84\u4e0b\u7684\u6240\u6709Agent\uff0c\u53ef\u4ee5\u5bf9Agent\u8fdb\u884c\u542f\u505c\u3001\u91cd\u542f\u3001\u5220\u9664\u7b49\u64cd\u4f5c\u3002</p> <p>\u53f3\u4fa7\u5c55\u793a\u4e86\u8fd0\u884c\u4e2dAgent\u7684\u57fa\u672c\u4fe1\u606f\uff0c\u5305\u62ecAgent ID\u3001Agent\u540d\u79f0\u3001Agent\u7c7b\u578b\u3001Agent\u72b6\u6001\u3001Agent\u521b\u5efa\u65f6\u95f4\u7b49\u3002</p>"},{"location":"zh/UserGuide/DASHBOARD_GUIDE/#stream-flow-graph","title":"\u76d1\u63a7Stream Flow Graph","text":"<p>\u56fe\u4e2d\u52a8\u6001\u5c55\u793a\u7cfb\u7edf\u5f53\u524d\u7684\u6d41\u8ba1\u7b97\u56fe\uff0c\u53ef\u4ee5\u76f4\u89c2\u5730\u770b\u5230\u5404\u4e2aAgent\u4e4b\u95f4\u62d3\u6251\u7ed3\u6784\u548c\u7edf\u8ba1\u4fe1\u606f\u3002</p>"},{"location":"zh/UserGuide/EDGE_SENSOR_USER_GUIDE/","title":"ChainStream\u8fb9\u7f18\u8bbe\u5907","text":"<p>\u76ee\u524d\u6211\u4eec\u63d0\u4f9b\u4e86\u9762\u5411Android\u7aef\u7684ChainStream Client App\uff0c\u53ef\u4ee5\u5c06Android\u8bbe\u5907\u5feb\u901f\u63a5\u5165ChainStream\u7cfb\u7edf\u4e2d\u3002</p> <p>\u4f46\u76ee\u524d\u4ec5\u652f\u6301\u4ece\u6e90\u7801\u7f16\u8bd1\u5b89\u88c5\uff0c\u7565\u4e3a\u9ebb\u70e6\u3002\u6211\u4eec\u4f1a\u5c3d\u5feb\u63d0\u4f9bAPK\u5b89\u88c5\u5305\uff0c\u8bf7\u5173\u6ce8\u6211\u4eec\u7684\u5b98\u65b9\u7f51\u7ad9\u3002</p>"},{"location":"zh/UserGuide/EDGE_SENSOR_USER_GUIDE/#_1","title":"\u8fb9\u7f18\u8bbe\u5907\u7ed3\u6784\u56fe","text":"<p>\u56fe\u4e2d\u754c\u9762\u6765\u6e90\u4e8e\u5f53\u524d\u7248\u672cChainStream Client App\u622a\u56fe\uff0c\u56fe\u4e2d\u5c0f\u7a97\u4e2d\u5c55\u793a\u6444\u50cf\u5934\u5b9e\u65f6\u753b\u9762\uff0c\u5e76\u540c\u65f6\u5c06\u753b\u9762\u63a8\u9001\u5230\u672c\u5730\u670d\u52a1\u5668\u5bf9\u5e94\u7684\u6d41\u4e2d\u3002</p>"},{"location":"zh/UserGuide/QUICK_START/","title":"\u5feb\u901f\u5165\u95e8","text":""},{"location":"zh/UserGuide/QUICK_START/#_2","title":"\u7cfb\u7edf\u7ed3\u6784","text":"<p>\u6b63\u5982ChainStream \u5e94\u7528\u573a\u666f\u4e2d\u63d0\u5230\u7684\uff0c\u7406\u60f3\u7684ChainStream\u4ea7\u54c1\u5f62\u6001\u662f\u5305\u62ec\u8fb9\u7f18\u8bbe\u5907-\u672c\u5730\u670d\u52a1\u5668-\u4e91\u7aef\u670d\u52a1\u5668\u4e09\u7ea7\u7684\u3002\u76ee\u524d\u7cfb\u7edf\u4e2d\u5df2\u7ecf\u5b9e\u73b0\u4e86\u8fb9\u7f18\u8bbe\u5907\u548c\u672c\u5730\u670d\u52a1\u5668\u7684\u529f\u80fd\uff0c\u4e91\u7aef\u670d\u52a1\u5668\u7684\u529f\u80fd\u6b63\u5728\u5f00\u53d1\u4e2d\u3002</p> <p>\u5f53\u524d\u6211\u4eec\u63d0\u4f9b\u4e86\u9762\u5411Android\u7cfb\u7edf\u7684Edge Sensor App\uff0c\u5728\u8bbe\u5907\u5b89\u88c5\u8be5App\u540e\u5373\u53ef\u5feb\u901f\u5c06\u8fb9\u7f18\u8bbe\u5907\u8fde\u63a5\u5230\u672c\u5730\u670d\u52a1\u5668\u4e2d\u3002</p> <p>\u5bf9\u4e8e\u672c\u5730\u670d\u52a1\u5668\u76ee\u524d\u9700\u8981\u624b\u52a8\u914d\u7f6e\u73af\u5883\u548c\u8fd0\u884c\uff0c\u540e\u7eed\u6211\u4eec\u4f1a\u8003\u8651\u652f\u6301docker\u5e76\u4e14\u53d1\u5e03\u6253\u5305\u597d\u7684\u5e94\u7528\u7a0b\u5e8f\u3002</p>"},{"location":"zh/UserGuide/QUICK_START/#_3","title":"\u672c\u5730\u670d\u52a1\u5668\u914d\u7f6e\u548c\u542f\u52a8","text":"<p>\u9996\u5148\uff0c\u4eceGitHub\u4e0aclone\u9879\u76ee\u4ee3\u7801\uff1a</p> <pre><code>git clone https://github.com/MobileLLM/ChainStream.git\n</code></pre> <p>\u7136\u540e\uff0c\u6839\u636e\u9700\u6c42\u5728\u5bf9\u5e94\u89e3\u91ca\u5668\u4e2d\u5b89\u88c5\u4f9d\u8d56\uff1a</p> <pre><code>pip install -e .\n</code></pre> <p>\u6700\u540e\uff0c\u542f\u52a8\u672c\u5730\u670d\u52a1\u5668\uff1a</p> <pre><code>python start.py\n</code></pre> <p>\u968f\u540e\uff0c\u6253\u5f00\u6d4f\u89c8\u5668\u8bbf\u95ee http://localhost:6677/ \uff0c\u5373\u53ef\u770b\u5230\u672c\u5730\u670d\u52a1\u5668\u7684\u6b22\u8fce\u9875\u9762\u3002</p>"}]}